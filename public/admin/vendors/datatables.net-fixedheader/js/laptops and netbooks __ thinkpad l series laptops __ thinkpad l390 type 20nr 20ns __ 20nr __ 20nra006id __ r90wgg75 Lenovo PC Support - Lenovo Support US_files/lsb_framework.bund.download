;
var _lsbSessionId;
var LSBV4;
(function (LSBV4) {
    var Utility = (function () {
        function Utility() {
        }
        Utility.IsValidVersion = function (minVersion, curVersion) {
            if (minVersion === curVersion) {
                return true;
            }
            var currentParts = curVersion.split(".");
            var minParts = minVersion.split(".");
            if (currentParts.length !== minParts.length) {
                return false;
            }
            var currVersionString = curVersion.replace(/\./g, "");
            var minVersionString = minVersion.replace(/\./g, "");
            if (parseInt(minVersionString) <= parseInt(currVersionString)) {
                return true;
            }
            return false;
        };
        Utility.CheckBrowser = function () {
            var isOpera = 'opera' in window || navigator.userAgent.indexOf(' OPR/') >= 0;
            if (isOpera) {
                return LSBV4.Utility.BrowserTypeEnum.Opera;
            }
            else if (typeof InstallTrigger !== 'undefined') {
                return LSBV4.Utility.BrowserTypeEnum.Firefox;
            }
            else if (Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0) {
                return LSBV4.Utility.BrowserTypeEnum.Safari;
            }
            else if ('chrome' in window && !isOpera) {
                return LSBV4.Utility.BrowserTypeEnum.Chrome;
            }
            else if (false || 'documentMode' in document) {
                return LSBV4.Utility.BrowserTypeEnum.IE;
            }
        };
        Utility.SetCookie = function (name, value) {
            if (!this.USE_COOKIES)
                return;
            var date = new Date();
            date.setTime(date.getTime() + (this.COOKIE_EXPIRATION_DAYS * 24 * 60 * 60 * 1000));
            Cookies.set(name, value, { expires: date });
        };
        Utility.GetProfileId = function () {
            return encodeURIComponent(Cookies.get('eSupportProfile'));
        };
        Utility.GetSessionId = function () {
            if (_lsbSessionId) {
                return _lsbSessionId;
            }
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", l.UrlUtility.getFullServicesPath("/Lsb/GetSessionId"), false);
            xmlHttp.onload = function (e) {
                _lsbSessionId = xmlHttp.responseText.substring(1, xmlHttp.responseText.length - 1);
            };
            xmlHttp.send(null);
            return _lsbSessionId;
        };
        Utility.GetWebAPIBaseUrl = function () {
            if (typeof (_webAPIUrl) != 'undefined' && _webAPIUrl != null && _webAPIUrl !== '') {
                if (_webAPIUrl.toLocaleLowerCase().indexOf('session') < 0) {
                    _webAPIUrl += '/V2.5/session';
                }
                return _webAPIUrl;
            }
            else {
                return '';
            }
        };
        Utility.AddEventListener = function (eventHandler) {
            LSBV4.Utility.EVENT_ARRAY.push(eventHandler);
        };
        Utility.RemoveEventListener = function (eventType, uniqueKey) {
            if (uniqueKey != null && uniqueKey != '') {
                var removeEvents = LSBV4.Utility.EVENT_ARRAY.filter(function (eh) { return eh.EventType === eventType && eh.uniqueKey === uniqueKey; });
                if (removeEvents != null && removeEvents.length > 0) {
                    var removeEventIndex_1 = -1;
                    removeEvents.forEach(function (eh) {
                        removeEventIndex_1 = LSBV4.Utility.EVENT_ARRAY.indexOf(eh);
                        LSBV4.Utility.EVENT_ARRAY.splice(removeEventIndex_1);
                    });
                }
            }
        };
        Utility.Log = function (info) {
            if (LSBV4.Utility.ENABLE_LOG === true) {
                console.log(info + ' ' + new Date().toTimeString());
            }
        };
        Utility.USE_COOKIES = true;
        Utility.COOKIE_EXPIRATION_DAYS = 10;
        Utility.HTTP_REQUEST_INTERVAL = 1000;
        Utility.INIT_FINISHED = false;
        Utility.EVENT_ARRAY = [];
        Utility.ENABLE_LOG = false;
        Utility.LSB_CLIENT_VERSION = '4.0.5.2';
        return Utility;
    }());
    LSBV4.Utility = Utility;
})(LSBV4 || (LSBV4 = {}));
(function (LSBV4) {
    var Utility;
    (function (Utility) {
        var BrowserTypeEnum;
        (function (BrowserTypeEnum) {
            BrowserTypeEnum[BrowserTypeEnum["Opera"] = 0] = "Opera";
            BrowserTypeEnum[BrowserTypeEnum["Firefox"] = 1] = "Firefox";
            BrowserTypeEnum[BrowserTypeEnum["Safari"] = 2] = "Safari";
            BrowserTypeEnum[BrowserTypeEnum["Chrome"] = 3] = "Chrome";
            BrowserTypeEnum[BrowserTypeEnum["IE"] = 4] = "IE";
        })(BrowserTypeEnum = Utility.BrowserTypeEnum || (Utility.BrowserTypeEnum = {}));
        var HttpRequestFailedTypeEnum;
        (function (HttpRequestFailedTypeEnum) {
            HttpRequestFailedTypeEnum[HttpRequestFailedTypeEnum["Failed"] = 0] = "Failed";
            HttpRequestFailedTypeEnum[HttpRequestFailedTypeEnum["TimeOut"] = 1] = "TimeOut";
            HttpRequestFailedTypeEnum[HttpRequestFailedTypeEnum["InitNotFinished"] = 2] = "InitNotFinished";
        })(HttpRequestFailedTypeEnum = Utility.HttpRequestFailedTypeEnum || (Utility.HttpRequestFailedTypeEnum = {}));
        var EventTypeEnum;
        (function (EventTypeEnum) {
            EventTypeEnum[EventTypeEnum["NoEvent"] = 0] = "NoEvent";
            EventTypeEnum[EventTypeEnum["NeedUpdateLsb"] = 1] = "NeedUpdateLsb";
            EventTypeEnum[EventTypeEnum["LSBUpdateFailed"] = 2] = "LSBUpdateFailed";
            EventTypeEnum[EventTypeEnum["LSBUpdateSuccess"] = 3] = "LSBUpdateSuccess";
            EventTypeEnum[EventTypeEnum["PingFailed"] = 4] = "PingFailed";
            EventTypeEnum[EventTypeEnum["PingSuccess"] = 5] = "PingSuccess";
            EventTypeEnum[EventTypeEnum["NotLenovo"] = 6] = "NotLenovo";
            EventTypeEnum[EventTypeEnum["Waiting"] = 7] = "Waiting";
            EventTypeEnum[EventTypeEnum["SystemNotSupport"] = 8] = "SystemNotSupport";
            EventTypeEnum[EventTypeEnum["UnhandledException"] = 9] = "UnhandledException";
            EventTypeEnum[EventTypeEnum["WrongRequest"] = 10] = "WrongRequest";
            EventTypeEnum[EventTypeEnum["UserCancelled"] = 11] = "UserCancelled";
            EventTypeEnum[EventTypeEnum["CommandFinished"] = 12] = "CommandFinished";
            EventTypeEnum[EventTypeEnum["RedirectSuccess"] = 13] = "RedirectSuccess";
            EventTypeEnum[EventTypeEnum["RedirectFailed"] = 14] = "RedirectFailed";
            EventTypeEnum[EventTypeEnum["DetectSuccess"] = 15] = "DetectSuccess";
            EventTypeEnum[EventTypeEnum["DetectFailed"] = 16] = "DetectFailed";
            EventTypeEnum[EventTypeEnum["ADUPSuccess"] = 17] = "ADUPSuccess";
            EventTypeEnum[EventTypeEnum["ADUPFailed"] = 18] = "ADUPFailed";
            EventTypeEnum[EventTypeEnum["ADUPStatusSuccess"] = 19] = "ADUPStatusSuccess";
            EventTypeEnum[EventTypeEnum["ADUPStatusFinish"] = 20] = "ADUPStatusFinish";
            EventTypeEnum[EventTypeEnum["ADUPCancelSuccess"] = 21] = "ADUPCancelSuccess";
            EventTypeEnum[EventTypeEnum["ADUPCancelFailed"] = 22] = "ADUPCancelFailed";
            EventTypeEnum[EventTypeEnum["ADUPInstallPackageFailed"] = 23] = "ADUPInstallPackageFailed";
            EventTypeEnum[EventTypeEnum["ADUPInstallConfirmNo"] = 24] = "ADUPInstallConfirmNo";
            EventTypeEnum[EventTypeEnum["ADUPInstallStatus"] = 25] = "ADUPInstallStatus";
            EventTypeEnum[EventTypeEnum["ADUPInstallPackageProcessFinished"] = 26] = "ADUPInstallPackageProcessFinished";
            EventTypeEnum[EventTypeEnum["NoTVSU"] = 27] = "NoTVSU";
            EventTypeEnum[EventTypeEnum["ErrorLaunchTVSU"] = 28] = "ErrorLaunchTVSU";
            EventTypeEnum[EventTypeEnum["ErrorDownloadTVSU"] = 29] = "ErrorDownloadTVSU";
            EventTypeEnum[EventTypeEnum["LowVersion"] = 30] = "LowVersion";
            EventTypeEnum[EventTypeEnum["InstallTVSUSuccess"] = 31] = "InstallTVSUSuccess";
            EventTypeEnum[EventTypeEnum["InstallTVSUFailed"] = 32] = "InstallTVSUFailed";
            EventTypeEnum[EventTypeEnum["InstallTVSUInstalling"] = 33] = "InstallTVSUInstalling";
            EventTypeEnum[EventTypeEnum["InstallTVSUCancelled"] = 34] = "InstallTVSUCancelled";
            EventTypeEnum[EventTypeEnum["InstallTVSUCancelFailed"] = 35] = "InstallTVSUCancelFailed";
            EventTypeEnum[EventTypeEnum["DownloadTVSUStatus"] = 36] = "DownloadTVSUStatus";
            EventTypeEnum[EventTypeEnum["DownloadTVSUCancel"] = 37] = "DownloadTVSUCancel";
            EventTypeEnum[EventTypeEnum["DownloadTVSUCancelFailed"] = 38] = "DownloadTVSUCancelFailed";
            EventTypeEnum[EventTypeEnum["DownloadTVSUPause"] = 39] = "DownloadTVSUPause";
            EventTypeEnum[EventTypeEnum["DownloadTVSUError"] = 40] = "DownloadTVSUError";
            EventTypeEnum[EventTypeEnum["TVSUUpdateFailed"] = 41] = "TVSUUpdateFailed";
            EventTypeEnum[EventTypeEnum["ADUPDetectInfoSuccess"] = 42] = "ADUPDetectInfoSuccess";
            EventTypeEnum[EventTypeEnum["DiagSuccess"] = 43] = "DiagSuccess";
            EventTypeEnum[EventTypeEnum["DiagFailed"] = 44] = "DiagFailed";
            EventTypeEnum[EventTypeEnum["DiagStatusSuccess"] = 45] = "DiagStatusSuccess";
            EventTypeEnum[EventTypeEnum["DiagStatusFailed"] = 46] = "DiagStatusFailed";
            EventTypeEnum[EventTypeEnum["DiagCancelSuccess"] = 47] = "DiagCancelSuccess";
            EventTypeEnum[EventTypeEnum["DiagCancelFailed"] = 48] = "DiagCancelFailed";
            EventTypeEnum[EventTypeEnum["NoLSC"] = 49] = "NoLSC";
            EventTypeEnum[EventTypeEnum["ErrorLaunchLSC"] = 50] = "ErrorLaunchLSC";
            EventTypeEnum[EventTypeEnum["ErrorDownloadLSC"] = 51] = "ErrorDownloadLSC";
            EventTypeEnum[EventTypeEnum["LSCNotLaunch"] = 52] = "LSCNotLaunch";
            EventTypeEnum[EventTypeEnum["InstallLSCSuccess"] = 53] = "InstallLSCSuccess";
            EventTypeEnum[EventTypeEnum["InstallLSCFailed"] = 54] = "InstallLSCFailed";
            EventTypeEnum[EventTypeEnum["DownloadLSCStatus"] = 55] = "DownloadLSCStatus";
            EventTypeEnum[EventTypeEnum["DownloadLSCPause"] = 56] = "DownloadLSCPause";
            EventTypeEnum[EventTypeEnum["DownloadLSCError"] = 57] = "DownloadLSCError";
            EventTypeEnum[EventTypeEnum["DownloadLSCCancel"] = 58] = "DownloadLSCCancel";
            EventTypeEnum[EventTypeEnum["DownloadLSCCancelFailed"] = 59] = "DownloadLSCCancelFailed";
            EventTypeEnum[EventTypeEnum["InstallLSCCancelled"] = 60] = "InstallLSCCancelled";
            EventTypeEnum[EventTypeEnum["InstallLSCCancelFailed"] = 61] = "InstallLSCCancelFailed";
            EventTypeEnum[EventTypeEnum["InstallLSCInstalling"] = 62] = "InstallLSCInstalling";
            EventTypeEnum[EventTypeEnum["NoWebAPIData"] = 63] = "NoWebAPIData";
            EventTypeEnum[EventTypeEnum["WrongWebAPIData"] = 64] = "WrongWebAPIData";
            EventTypeEnum[EventTypeEnum["ModuleNotSupport"] = 65] = "ModuleNotSupport";
            EventTypeEnum[EventTypeEnum["DLMSuccess"] = 66] = "DLMSuccess";
            EventTypeEnum[EventTypeEnum["DLMFailed"] = 67] = "DLMFailed";
            EventTypeEnum[EventTypeEnum["DLMStatusSuccess"] = 68] = "DLMStatusSuccess";
            EventTypeEnum[EventTypeEnum["DLMCancelSuccess"] = 69] = "DLMCancelSuccess";
            EventTypeEnum[EventTypeEnum["DLMCancelFailed"] = 70] = "DLMCancelFailed";
            EventTypeEnum[EventTypeEnum["DLMPauseSuccess"] = 71] = "DLMPauseSuccess";
            EventTypeEnum[EventTypeEnum["DLMPauseFailed"] = 72] = "DLMPauseFailed";
            EventTypeEnum[EventTypeEnum["DLMResumeFailed"] = 73] = "DLMResumeFailed";
            EventTypeEnum[EventTypeEnum["DLMError"] = 74] = "DLMError";
            EventTypeEnum[EventTypeEnum["UserCancelSelectingLocation"] = 75] = "UserCancelSelectingLocation";
            EventTypeEnum[EventTypeEnum["NotEnoughDiskSpace"] = 76] = "NotEnoughDiskSpace";
            EventTypeEnum[EventTypeEnum["DLMCheckStatusSuccess"] = 77] = "DLMCheckStatusSuccess";
            EventTypeEnum[EventTypeEnum["OSDiagScanSuccess"] = 78] = "OSDiagScanSuccess";
            EventTypeEnum[EventTypeEnum["OSDiagScanFailed"] = 79] = "OSDiagScanFailed";
            EventTypeEnum[EventTypeEnum["OSDiagRunSuccess"] = 80] = "OSDiagRunSuccess";
            EventTypeEnum[EventTypeEnum["OSDiagRunFailed"] = 81] = "OSDiagRunFailed";
            EventTypeEnum[EventTypeEnum["OSDiagRunByIdSuccess"] = 82] = "OSDiagRunByIdSuccess";
            EventTypeEnum[EventTypeEnum["OSDiagRunByIdFailed"] = 83] = "OSDiagRunByIdFailed";
        })(EventTypeEnum = Utility.EventTypeEnum || (Utility.EventTypeEnum = {}));
        var EventHandler = (function () {
            function EventHandler() {
            }
            return EventHandler;
        }());
        Utility.EventHandler = EventHandler;
        var DownloadFilesInfo = (function () {
            function DownloadFilesInfo() {
                this.FileId = "";
                this.Url = "";
                this.Name = "";
                this.DSName = "";
                this.Version = "";
                this.Released = "";
            }
            return DownloadFilesInfo;
        }());
        Utility.DownloadFilesInfo = DownloadFilesInfo;
    })(Utility = LSBV4.Utility || (LSBV4.Utility = {}));
})(LSBV4 || (LSBV4 = {}));
(function () {
    if (!LSBV4.Utility.INIT_FINISHED) {
        LSBV4.Utility.INIT_FINISHED = true;
    }
})();
var LSBV4;
(function (LSBV4) {
    var Operation;
    (function (Operation) {
        var AbsstractOperation = (function () {
            function AbsstractOperation() {
            }
            return AbsstractOperation;
        }());
        Operation.AbsstractOperation = AbsstractOperation;
        var AbstractOperationRequest = (function () {
            function AbstractOperationRequest() {
                this.Interval = null;
                this.Async = true;
                this.SendFixedData = false;
                this.SendDataWhenRequest = false;
                this.RunWhenFailed = false;
                this.SuccessEventType = LSBV4.Utility.EventTypeEnum.NoEvent;
                this.FailedEventType = LSBV4.Utility.EventTypeEnum.NoEvent;
                this.BranchVersion = 0;
                this.NextBranchVersion = null;
            }
            AbstractOperationRequest.prototype.GetRequestString = function (action) {
                return action;
            };
            AbstractOperationRequest.prototype.SetLoopExecution = function (isLoopExecution, loopHandler) {
                this._isLoopExecution = isLoopExecution;
                this._isLoopFinished = loopHandler;
            };
            AbstractOperationRequest.prototype.IsLoopExecution = function () {
                return this._isLoopExecution;
            };
            AbstractOperationRequest.prototype.IsLoopFinished = function () {
                return this._isLoopFinished;
            };
            return AbstractOperationRequest;
        }());
        Operation.AbstractOperationRequest = AbstractOperationRequest;
    })(Operation = LSBV4.Operation || (LSBV4.Operation = {}));
})(LSBV4 || (LSBV4 = {}));
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var LSBV4;
(function (LSBV4) {
    var Operation;
    (function (Operation) {
        var CORSOperation = (function (_super) {
            __extends(CORSOperation, _super);
            function CORSOperation() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this._retryCount = 0;
                return _this;
            }
            CORSOperation.prototype._httpRequestFailedHander = function (request, content, deferredObj) {
                var retryTimes = (request.RetryTimes != null && request.RetryTimes >= 0) ?
                    request.RetryTimes :
                    (request.IsLocalCall === true ? CORSOperation.LOCAL_RETRY_TIMES : CORSOperation.REMOTE_RETRY_TIMES);
                var interval = request.IsLocalCall === true ? request.RetryInPeroid === true ? CORSOperation.INTERVAL_FOR_TIMEOUT : CORSOperation.LOCAL_INTERVAL : CORSOperation.REMOTE_INTERVAL;
                if (this._timeoutStartTime == null) {
                    this._timeoutStartTime = new Date();
                }
                var nowDate = new Date();
                var timeOut = Number(nowDate) - Number(this._timeoutStartTime);
                if (((request.RetryInPeroid === true && timeOut < CORSOperation.TIMEOUT)
                    || (request.RetryInPeroid !== true && this._retryCount < retryTimes))) {
                    if (request.CustomRetryStop == null || (request.CustomRetryStop != null && request.CustomRetryStop() !== true)) {
                        if (request.RetryInPeroid === true) {
                            LSBV4.Utility.Log('Retry. In: ' + timeOut.toString());
                        }
                        else {
                            LSBV4.Utility.Log('Retry. Count: ' + this._retryCount.toString());
                        }
                        if (request.IsLocalCall === true) {
                            if (HTTPRequest.LAST_LOCAL_PORT_INDEX === -1) {
                                HTTPRequest.LAST_LOCAL_PORT_INDEX = HTTPRequest.CURRENT_LOCAL_PORT_INDEX;
                            }
                            HTTPRequest.MoveNextPort();
                            if (HTTPRequest.CURRENT_LOCAL_PORT_INDEX !== HTTPRequest.LAST_LOCAL_PORT_INDEX) {
                                LSBV4.Utility.Log('Try next local port: ' + HTTPRequest.GetLocalPort().toString() + '.');
                                setTimeout(function (operationObj, deferredObj) {
                                    operationObj.CallCORSWithDeferredObj(request, deferredObj);
                                }, CORSOperation.LOCAL_PORTS_POLLING_INTERVAL, this, deferredObj);
                                return;
                            }
                        }
                        setTimeout(function (operationObj, deferredObj) {
                            operationObj.CallCORSWithDeferredObj(request, deferredObj);
                        }, interval, this, deferredObj);
                        if (request.RetryInPeroid !== true) {
                            this._retryCount++;
                        }
                    }
                    else {
                        this._retryCount = 0;
                        this._timeoutStartTime = null;
                        HTTPRequest.LAST_LOCAL_PORT_INDEX = -1;
                        LSBV4.Utility.Log('CORS cancelled.');
                        deferredObj.resolve();
                    }
                }
                else {
                    this._retryCount = 0;
                    this._timeoutStartTime = null;
                    HTTPRequest.LAST_LOCAL_PORT_INDEX = -1;
                    LSBV4.Utility.Log('CORS timeout.');
                    deferredObj.rejectWith(content, [LSBV4.Utility.HttpRequestFailedTypeEnum.TimeOut]);
                }
            };
            CORSOperation.prototype.CallCORSWithDeferredObj = function (request, deferredParam) {
                var _this = this;
                var deferredObj = deferredParam;
                var methodStr = HTTPMethodEnum[request.Method];
                var postData = {};
                if (request.IsLocalCall !== true && request.Method === HTTPMethodEnum.POST) {
                    postData[request.URLKey] = request.RequestData;
                    postData = JSON.stringify(postData);
                }
                else {
                    postData = request.RequestData;
                }
                var sessionId = LSBV4.Utility.GetSessionId();
                $.ajax({
                    cache: false,
                    crossDomain: true,
                    async: request.Async,
                    timeout: request.Timeout,
                    data: postData,
                    dataType: request.Method === HTTPMethodEnum.GET ? 'JSON' : 'TEXT',
                    headers: request.IsLocalCall === true ? {
                        'Current-Version': LSBV4.Utility.LSB_CLIENT_VERSION,
                        'eSupport_SessionID_e': sessionId
                    } : {
                        'Content-Type': 'application/json',
                        'clientid': 'DCwRT5NXQz9xJzYaDN9OcQ==',
                        'Cache-Control': 'no-cache',
                        'eSupport_SessionID_e': sessionId
                    },
                    method: methodStr,
                    url: request.GetRequestString(request.URLKey)
                }).done(function (content) {
                    if (content == null || content === '') {
                        if (methodStr.toUpperCase() !== 'GET') {
                            _this._retryCount = 0;
                            _this._timeoutStartTime = null;
                            LSBV4.Utility.Log('Call web api (Not Get) success!');
                            if (request.IsLocalCall === true) {
                                LSBV4.Utility.SetCookie('LSBLocalPort', HTTPRequest.CURRENT_LOCAL_PORT_INDEX.toString());
                                LSBV4.Utility.Log('Record new port index: ' + Cookies.get('LSBLocalPort'));
                            }
                            deferredObj.resolve();
                        }
                        else {
                            _this._httpRequestFailedHander(request, content, deferredObj);
                        }
                    }
                    else {
                        _this._retryCount = 0;
                        _this._timeoutStartTime = null;
                        if (typeof content === 'object') {
                            deferredObj.resolve(content);
                        }
                        else {
                            deferredObj.resolve(JSON.parse(content));
                        }
                        LSBV4.Utility.Log('Call web api (Get) success!');
                    }
                }).fail(function (data) {
                    if (request.NoResponseCall === false) {
                        _this._httpRequestFailedHander(request, data, deferredObj);
                    }
                    else {
                        _this._retryCount = 0;
                        _this._timeoutStartTime = null;
                        deferredObj.resolve();
                        LSBV4.Utility.Log('Call web api (Get) success!');
                    }
                });
            };
            CORSOperation.prototype.Send = function (request) {
                var deferredObj = $.Deferred();
                if (request == null) {
                    LSBV4.Utility.Log('No request assigned');
                    deferredObj.reject();
                }
                this._retryCount = 0;
                this._timeoutStartTime = null;
                this.CallCORSWithDeferredObj(request, deferredObj);
                return deferredObj.promise();
            };
            CORSOperation.GetSingleton = function () {
                if (CORSOperation.SINGLETON_OBJECT == null) {
                    CORSOperation.SINGLETON_OBJECT = new CORSOperation();
                }
                return CORSOperation.SINGLETON_OBJECT;
            };
            CORSOperation.LOCAL_INTERVAL = 1000;
            CORSOperation.INTERVAL_FOR_TIMEOUT = 5000;
            CORSOperation.REMOTE_INTERVAL = 5000;
            CORSOperation.LOCAL_RETRY_TIMES = 1;
            CORSOperation.REMOTE_RETRY_TIMES = 10;
            CORSOperation.TIMEOUT = 600000;
            CORSOperation.LOCAL_PORTS_POLLING_INTERVAL = 100;
            return CORSOperation;
        }(Operation.AbsstractOperation));
        Operation.CORSOperation = CORSOperation;
        var HTTPMethodEnum;
        (function (HTTPMethodEnum) {
            HTTPMethodEnum[HTTPMethodEnum["GET"] = 0] = "GET";
            HTTPMethodEnum[HTTPMethodEnum["POST"] = 1] = "POST";
            HTTPMethodEnum[HTTPMethodEnum["DELETE"] = 2] = "DELETE";
        })(HTTPMethodEnum = Operation.HTTPMethodEnum || (Operation.HTTPMethodEnum = {}));
        var HTTPRequest = (function (_super) {
            __extends(HTTPRequest, _super);
            function HTTPRequest(method, urlKey, sendDataWhenRequest, operation, isLocalCall) {
                if (isLocalCall === void 0) { isLocalCall = false; }
                var _this = _super.call(this) || this;
                _this.IsLocalCall = false;
                _this.IsCustomCall = false;
                _this.RetryInPeroid = false;
                _this.Timeout = 5000;
                _this.RetryTimes = null;
                _this.NoResponseCall = false;
                _this.CustomRetryStop = null;
                _this.Operation = operation;
                _this.Method = method;
                _this.URLKey = urlKey;
                _this.SendDataWhenRequest = sendDataWhenRequest;
                _this.IsLocalCall = isLocalCall;
                _this.Interval = 3000;
                return _this;
            }
            HTTPRequest.prototype.GetRequestString = function (action) {
                if (this.IsCustomCall === true) {
                    return action;
                }
                else if (this.IsLocalCall === true) {
                    return 'http://localhost:' + HTTPRequest.GetLocalPort().toString() + '/' + action + '?profile=' + LSBV4.Utility.GetProfileId();
                }
                else {
                    if (this.Method === HTTPMethodEnum.POST) {
                        return LSBV4.Utility.GetWebAPIBaseUrl();
                    }
                    else {
                        return LSBV4.Utility.GetWebAPIBaseUrl() + '?type=' + action;
                    }
                }
            };
            HTTPRequest.GetLocalPort = function () {
                if (HTTPRequest.LOCAL_PORT_ARRAY.length <= 0) {
                    HTTPRequest.CURRENT_LOCAL_PORT_INDEX = -1;
                    LSBV4.Utility.Log('Port number of localhost is not assigned');
                    return -1;
                }
                var savePort = true;
                if (HTTPRequest.CURRENT_LOCAL_PORT_INDEX === -1) {
                    var localPortIndexStr = Cookies.get('LSBLocalPort');
                    if (localPortIndexStr != null && localPortIndexStr !== '') {
                        var localPortIndex = Number(localPortIndexStr);
                        if (isNaN(localPortIndex) === false) {
                            HTTPRequest.CURRENT_LOCAL_PORT_INDEX = localPortIndex;
                            savePort = false;
                        }
                    }
                }
                else {
                    savePort = false;
                }
                if (HTTPRequest.CURRENT_LOCAL_PORT_INDEX >= HTTPRequest.LOCAL_PORT_ARRAY.length ||
                    HTTPRequest.CURRENT_LOCAL_PORT_INDEX < 0) {
                    HTTPRequest.CURRENT_LOCAL_PORT_INDEX = 0;
                    savePort = true;
                }
                if (savePort === true) {
                    HTTPRequest.CURRENT_LOCAL_PORT_INDEX = 0;
                    LSBV4.Utility.SetCookie('LSBLocalPort', HTTPRequest.CURRENT_LOCAL_PORT_INDEX.toString());
                    LSBV4.Utility.Log('Record new port index: ' + Cookies.get('LSBLocalPort'));
                }
                return HTTPRequest.LOCAL_PORT_ARRAY[HTTPRequest.CURRENT_LOCAL_PORT_INDEX];
            };
            HTTPRequest.AddLocalPort = function (port) {
                HTTPRequest.LOCAL_PORT_ARRAY.push(port);
            };
            HTTPRequest.GetLocalPortArrayLength = function () {
                return HTTPRequest.LOCAL_PORT_ARRAY.length;
            };
            HTTPRequest.MoveNextPort = function () {
                HTTPRequest.CURRENT_LOCAL_PORT_INDEX++;
                if (HTTPRequest.CURRENT_LOCAL_PORT_INDEX >= HTTPRequest.LOCAL_PORT_ARRAY.length) {
                    HTTPRequest.CURRENT_LOCAL_PORT_INDEX = 0;
                }
            };
            HTTPRequest.LOCAL_PORT_ARRAY = [];
            HTTPRequest.CURRENT_LOCAL_PORT_INDEX = -1;
            HTTPRequest.LAST_LOCAL_PORT_INDEX = -1;
            return HTTPRequest;
        }(Operation.AbstractOperationRequest));
        Operation.HTTPRequest = HTTPRequest;
    })(Operation = LSBV4.Operation || (LSBV4.Operation = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Operation;
    (function (Operation) {
        var CustomOperation = (function (_super) {
            __extends(CustomOperation, _super);
            function CustomOperation() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CustomOperation.prototype.Send = function (request) {
                var deferredObj = $.Deferred();
                if (request == null) {
                    LSBV4.Utility.Log('No request assigned');
                    deferredObj.reject();
                }
                var result = request.action();
                if (result === true) {
                    deferredObj.resolve();
                }
                else {
                    deferredObj.reject();
                }
                return deferredObj.promise();
            };
            CustomOperation.GetSingleton = function () {
                if (CustomOperation.SINGLETON_OBJECT == null) {
                    CustomOperation.SINGLETON_OBJECT = new CustomOperation();
                }
                return CustomOperation.SINGLETON_OBJECT;
            };
            return CustomOperation;
        }(Operation.AbsstractOperation));
        Operation.CustomOperation = CustomOperation;
        var CustomOperationRequest = (function (_super) {
            __extends(CustomOperationRequest, _super);
            function CustomOperationRequest(action, operation) {
                var _this = _super.call(this) || this;
                _this.Operation = operation;
                _this.action = action;
                return _this;
            }
            return CustomOperationRequest;
        }(Operation.AbstractOperationRequest));
        Operation.CustomOperationRequest = CustomOperationRequest;
    })(Operation = LSBV4.Operation || (LSBV4.Operation = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Operation;
    (function (Operation) {
        var RedirectOperation = (function (_super) {
            __extends(RedirectOperation, _super);
            function RedirectOperation() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            RedirectOperation.prototype.Send = function (request) {
                var deferredObj = $.Deferred();
                var id = new Date().getTime().toString();
                var requestStr = RedirectRequest.GetRequestString(id);
                if (request != null && requestStr === '') {
                    LSBV4.Utility.Log('No request assigned');
                    deferredObj.reject();
                }
                var newWindow;
                if (request.ToNewWindow === true) {
                    newWindow = window.open(requestStr, '_blank', 'top=0,left=0,width=' + (window.screen.availWidth) + ',height = ' + (window.screen.availHeight - 60) + ',menubar=no');
                }
                else {
                    newWindow = window.open(requestStr);
                }
                var httpPageReadyHandler = new WindowMessageHandlerInfo(WindowMessageType.HTTPPageReady, id, newWindow, function (targetWindow, message) {
                    var readyMessage = new WindowMessageData();
                    readyMessage.MessageType = WindowMessageType.PostDataForHTTPPage;
                    readyMessage.Data = request.RequestData;
                    readyMessage.ID = message.ID;
                    readyMessage.Action = request.RequestType;
                    targetWindow.postMessage(readyMessage, 'http://' + location.hostname + RedirectRequest.GetHTTPPagePort());
                });
                LSBV4.Operation.RedirectOperation.AddWindowMessageHandler(httpPageReadyHandler);
                var httpPageFunctionFinishedHandler = new WindowMessageHandlerInfo(WindowMessageType.HTTPPageFunctionFinished, id, null, function (targetWindow, message) {
                    LSBV4.Operation.RedirectOperation.ClearWindowMessageHandlerById(message.ID);
                    if (message.Data == null) {
                        deferredObj.resolve();
                    }
                    else {
                        deferredObj.resolve(message.Data);
                    }
                });
                LSBV4.Operation.RedirectOperation.AddWindowMessageHandler(httpPageFunctionFinishedHandler);
                var httpPageClosedHandler = new WindowMessageHandlerInfo(WindowMessageType.HTTPPageClosed, id, null, function (targetWindow, message) {
                    LSBV4.Utility.Log('User Cancelled');
                    LSBV4.Operation.RedirectOperation.ClearWindowMessageHandlerById(message.ID);
                    deferredObj.reject({ NoLSBAndCancelled: true });
                });
                LSBV4.Operation.RedirectOperation.AddWindowMessageHandler(httpPageClosedHandler);
                return deferredObj.promise();
            };
            RedirectOperation._HandleWindowMessage = function (messageData) {
                var messageHandler = this.GetWindowMessageHandler(messageData.MessageType, messageData.ID);
                if (messageHandler != null) {
                    messageHandler.Handler(messageHandler.TargetWindow, messageData);
                }
            };
            RedirectOperation.ClearWindowMessageHandlerById = function (id) {
                var _this = this;
                var messageHandlerInfo = this._windowMessageHandler.filter(function (info) {
                    return info.Message.ID === id;
                });
                if (messageHandlerInfo != null && messageHandlerInfo.length > 0) {
                    messageHandlerInfo.forEach(function (info) {
                        var handlerIndex = _this._windowMessageHandler.indexOf(info);
                        _this._windowMessageHandler.splice(handlerIndex, 1);
                    });
                }
            };
            RedirectOperation.GetSingleton = function () {
                if (RedirectOperation.SINGLETON_OBJECT == null) {
                    RedirectOperation.SINGLETON_OBJECT = new RedirectOperation();
                }
                return RedirectOperation.SINGLETON_OBJECT;
            };
            RedirectOperation.ValidateMessageOrigin = function (origin) {
                if (origin != null && origin !== '') {
                    var testEle = document.createElement('a');
                    testEle.href = origin;
                    var protocolStr = this.IsLSBPage() ? RedirectOperation.GetRedirectPageParam('protocol') : 'http';
                    if (testEle.hostname.toUpperCase() !== location.hostname.toUpperCase()
                        || testEle.protocol.toUpperCase().replace(':', '') !== protocolStr.toUpperCase()) {
                        return false;
                    }
                    return true;
                }
                return false;
            };
            RedirectOperation.InitWindowMessageLisenter = function () {
                var _this = this;
                window.addEventListener('message', function (ev) {
                    var isValid = _this.ValidateMessageOrigin(ev.origin);
                    if (_this.ValidateMessageOrigin(ev.origin) === true) {
                        if (ev.data != null) {
                            LSBV4.Utility.Log(JSON.stringify(ev));
                            var data = ev.data;
                            switch (data.MessageType) {
                                case WindowMessageType.HTTPPageReady:
                                    LSBV4.Utility.Log('HTTPPageReady message received');
                                    _this._HandleWindowMessage(data);
                                    break;
                                case WindowMessageType.HTTPPageFunctionFinished:
                                    LSBV4.Utility.Log('HTTPPageFunctionFinished message received');
                                    _this._HandleWindowMessage(data);
                                    break;
                                case WindowMessageType.HTTPPageClosed:
                                    LSBV4.Utility.Log('HTTPPageClosed message received');
                                    _this._HandleWindowMessage(data);
                                    break;
                                case WindowMessageType.PostDataForHTTPPage:
                                    LSBV4.Utility.Log('PostDataForHTTPPage message received');
                                    LSBV4.Operation.RedirectOperation.LoadRedirectPage(false, data.Action, data.Data);
                                    break;
                                default:
                                    LSBV4.Utility.Log('Invalid window post message type');
                                    break;
                            }
                        }
                    }
                    else {
                        LSBV4.Utility.Log('Invalid message origin, expected:' + ev.origin);
                    }
                });
            };
            RedirectOperation.AddWindowMessageHandler = function (handlerInfo) {
                var _this = this;
                var messageHandlerInfo = this._windowMessageHandler.filter(function (info) {
                    return info.Message.MessageType === handlerInfo.Message.MessageType
                        && info.Message.ID === handlerInfo.Message.ID;
                });
                if (messageHandlerInfo != null && messageHandlerInfo.length > 0) {
                    messageHandlerInfo.forEach(function (info) {
                        var handlerIndex = _this._windowMessageHandler.indexOf(info);
                        _this._windowMessageHandler.splice(handlerIndex, 1);
                    });
                }
                this._windowMessageHandler.push(handlerInfo);
            };
            RedirectOperation.GetWindowMessageHandler = function (messageType, id) {
                var _this = this;
                var messageHandlerInfo = this._windowMessageHandler.filter(function (info) {
                    return info.Message.MessageType === messageType && info.Message.ID === id;
                });
                if (messageHandlerInfo != null && messageHandlerInfo.length > 0) {
                    var info = messageHandlerInfo[0];
                    messageHandlerInfo.forEach(function (info) {
                        var handlerIndex = _this._windowMessageHandler.indexOf(info);
                        _this._windowMessageHandler.splice(handlerIndex, 1);
                    });
                    return info;
                }
                return null;
            };
            RedirectOperation.IsLSBPage = function () {
                var currentLocation = location.pathname.toUpperCase();
                var lsbPagePath = RedirectRequest.GetHTTPPagePath().toUpperCase();
                return currentLocation.indexOf(lsbPagePath, currentLocation.length - lsbPagePath.length) !== -1;
            };
            RedirectOperation.GetRedirectPageParam = function (key) {
                key = key.toUpperCase();
                var param = decodeURIComponent(location.search.trim().replace('?', ''));
                var httpPagePath = RedirectRequest.GetHTTPPagePath().toUpperCase();
                var currentLocation = location.pathname.toUpperCase();
                if (currentLocation.indexOf(httpPagePath, currentLocation.length - httpPagePath.length) !== -1 && param != null && param != '') {
                    var paramArray = param.split('&');
                    if (paramArray != null && paramArray.length > 0) {
                        for (var iParam = 0; iParam < paramArray.length; iParam++) {
                            var splitPos = paramArray[iParam].indexOf('=');
                            if (splitPos >= 0) {
                                if (key === paramArray[iParam].substring(0, splitPos).toUpperCase()) {
                                    return paramArray[iParam].substring(splitPos + 1);
                                }
                            }
                        }
                    }
                }
                return '';
            };
            RedirectOperation.LoadRedirectPage = function (isReload, action, data) {
                if (isReload === void 0) { isReload = true; }
                this.PageAction = action;
                this.PageData = data;
                var dispatch = LSBV4.Dispatcher.GetDispatcher();
                switch (action) {
                    case LSBV4.Operation.RedirectRequestActionEnum.Detect:
                        dispatch.ExecCommand(LSBV4.Component.ComponentTypeEnum.DetectForHTTPPage, isReload === true ? LSBV4.Component.CommandTypeEnum.ContinuousScan : LSBV4.Component.CommandTypeEnum.Scan);
                        break;
                    case LSBV4.Operation.RedirectRequestActionEnum.DLMStart:
                        if (data == null) {
                            LSBV4.Utility.Log('No install information found');
                            return;
                        }
                        dispatch.ExecCommand(LSBV4.Component.ComponentTypeEnum.DLMForHTTPPage, isReload === true ? LSBV4.Component.CommandTypeEnum.ContinuousScan : LSBV4.Component.CommandTypeEnum.Scan, data);
                        break;
                    case LSBV4.Operation.RedirectRequestActionEnum.DLMResume:
                        dispatch.ExecCommand(LSBV4.Component.ComponentTypeEnum.DLMForHTTPPage, isReload === true ? LSBV4.Component.CommandTypeEnum.ContinuousScanResume : LSBV4.Component.CommandTypeEnum.ScanResume);
                        break;
                    case LSBV4.Operation.RedirectRequestActionEnum.ADUPStart:
                        dispatch.ExecCommand(LSBV4.Component.ComponentTypeEnum.ADUPForHTTPPage, isReload === true ? LSBV4.Component.CommandTypeEnum.ContinuousScan : LSBV4.Component.CommandTypeEnum.Scan);
                        break;
                    case LSBV4.Operation.RedirectRequestActionEnum.ADUPInstall:
                        if (data == null) {
                            LSBV4.Utility.Log('No install information found');
                            return;
                        }
                        dispatch.ExecCommand(LSBV4.Component.ComponentTypeEnum.ADUPForHTTPPage, isReload === true ? LSBV4.Component.CommandTypeEnum.ContinuousInstallPackage : LSBV4.Component.CommandTypeEnum.InstallPackage, data);
                        break;
                    case LSBV4.Operation.RedirectRequestActionEnum.OSDiagScan:
                        dispatch.ExecCommand(LSBV4.Component.ComponentTypeEnum.OSDiagForHTTPPage, isReload === true ? LSBV4.Component.CommandTypeEnum.ContinuousScan : LSBV4.Component.CommandTypeEnum.Scan);
                        break;
                    case LSBV4.Operation.RedirectRequestActionEnum.OSDiagRun:
                        if (data == null) {
                            LSBV4.Utility.Log('No install information found');
                            return;
                        }
                        dispatch.ExecCommand(LSBV4.Component.ComponentTypeEnum.OSDiagForHTTPPage, isReload === true ? LSBV4.Component.CommandTypeEnum.ContinuousRun : LSBV4.Component.CommandTypeEnum.Run, data);
                        break;
                    case LSBV4.Operation.RedirectRequestActionEnum.OSDiagRunById:
                        if (data == null) {
                            LSBV4.Utility.Log('No install information found');
                            return;
                        }
                        dispatch.ExecCommand(LSBV4.Component.ComponentTypeEnum.OSDiagForHTTPPage, isReload === true ? LSBV4.Component.CommandTypeEnum.ContinuousRunById : LSBV4.Component.CommandTypeEnum.RunById, data);
                        break;
                    case LSBV4.Operation.RedirectRequestActionEnum.SysDiagStart:
                        dispatch.ExecCommand(LSBV4.Component.ComponentTypeEnum.SysDiagForHTTPPage, isReload === true ? LSBV4.Component.CommandTypeEnum.ContinuousScan : LSBV4.Component.CommandTypeEnum.Scan);
                        break;
                    case LSBV4.Operation.RedirectRequestActionEnum.ModuleBasedDiagStart:
                        if (data == null) {
                            LSBV4.Utility.Log('No module information found');
                            return;
                        }
                        dispatch.ExecCommand(LSBV4.Component.ComponentTypeEnum.SysDiagForHTTPPage, isReload === true ? LSBV4.Component.CommandTypeEnum.ContinuousRunById : LSBV4.Component.CommandTypeEnum.RunById, data);
                        break;
                    default:
                        LSBV4.Utility.Log('Invalid page action');
                        break;
                }
            };
            RedirectOperation._windowMessageHandler = [];
            return RedirectOperation;
        }(Operation.AbsstractOperation));
        Operation.RedirectOperation = RedirectOperation;
        var WindowMessageData = (function () {
            function WindowMessageData() {
            }
            return WindowMessageData;
        }());
        Operation.WindowMessageData = WindowMessageData;
        var WindowMessageType;
        (function (WindowMessageType) {
            WindowMessageType[WindowMessageType["HTTPPageReady"] = 0] = "HTTPPageReady";
            WindowMessageType[WindowMessageType["HTTPPageClosed"] = 1] = "HTTPPageClosed";
            WindowMessageType[WindowMessageType["HTTPPageFunctionFinished"] = 2] = "HTTPPageFunctionFinished";
            WindowMessageType[WindowMessageType["PostDataForHTTPPage"] = 3] = "PostDataForHTTPPage";
        })(WindowMessageType = Operation.WindowMessageType || (Operation.WindowMessageType = {}));
        var WindowMessageHandlerInfo = (function () {
            function WindowMessageHandlerInfo(messageType, id, targetWindow, handler) {
                var httpPageReadyMessageData = new WindowMessageData();
                httpPageReadyMessageData.ID = id;
                httpPageReadyMessageData.MessageType = messageType;
                this.TargetWindow = targetWindow;
                this.Message = httpPageReadyMessageData;
                this.Handler = handler;
            }
            return WindowMessageHandlerInfo;
        }());
        Operation.WindowMessageHandlerInfo = WindowMessageHandlerInfo;
        var RedirectRequest = (function (_super) {
            __extends(RedirectRequest, _super);
            function RedirectRequest(requestAction, operation, sendDataWhenRequest) {
                if (sendDataWhenRequest === void 0) { sendDataWhenRequest = false; }
                var _this = _super.call(this) || this;
                _this.ToNewWindow = false;
                _this.Operation = operation;
                _this.RequestType = requestAction;
                _this.SendDataWhenRequest = sendDataWhenRequest;
                return _this;
            }
            RedirectRequest.GetHTTPPageName = function () {
                var lsbPageName = 'lsbpagev4';
                return lsbPageName;
            };
            RedirectRequest.GetHTTPPagePath = function () {
                return '/' + this.GetHTTPPageName();
            };
            RedirectRequest.GetHTTPPagePort = function () {
                if (location.protocol === 'http:') {
                    return ':' + location.port;
                }
                else {
                    if (location.hostname.toLowerCase() === 'support.lenovo.com') {
                        return '';
                    }
                    else if (location.hostname.toLowerCase() === 'debug.lenovo.com') {
                        return ':8002';
                    }
                    else if (location.hostname.toLowerCase() === 'testlsb.lenovo.com') {
                        return ':54415';
                    }
                    else {
                        return '';
                    }
                }
            };
            RedirectRequest.GetRequestString = function (id) {
                var langAndCountry = '/' + l.CultureUtility.getCurrentCountry() + '/' + l.CultureUtility.getCurrentLanguage();
                var urlParam = encodeURIComponent('id=' + id + '&lsbPageName=' + this.GetHTTPPageName() + '&protocol=' + location.protocol.replace(':', '') + '&port=' + (location.port === '' ? '' : ':' + location.port) + '&sId=' + LSBV4.Utility.GetSessionId() + '&lang=' + langAndCountry);
                return 'http://' + location.hostname + this.GetHTTPPagePort() + this.GetHTTPPagePath() + '?' + urlParam;
            };
            return RedirectRequest;
        }(Operation.AbstractOperationRequest));
        Operation.RedirectRequest = RedirectRequest;
        var RedirectRequestActionEnum;
        (function (RedirectRequestActionEnum) {
            RedirectRequestActionEnum[RedirectRequestActionEnum["Detect"] = 0] = "Detect";
            RedirectRequestActionEnum[RedirectRequestActionEnum["DLMStart"] = 1] = "DLMStart";
            RedirectRequestActionEnum[RedirectRequestActionEnum["DLMResume"] = 2] = "DLMResume";
            RedirectRequestActionEnum[RedirectRequestActionEnum["ADUPStart"] = 3] = "ADUPStart";
            RedirectRequestActionEnum[RedirectRequestActionEnum["ADUPInstall"] = 4] = "ADUPInstall";
            RedirectRequestActionEnum[RedirectRequestActionEnum["OSDiagScan"] = 5] = "OSDiagScan";
            RedirectRequestActionEnum[RedirectRequestActionEnum["OSDiagRun"] = 6] = "OSDiagRun";
            RedirectRequestActionEnum[RedirectRequestActionEnum["OSDiagRunById"] = 7] = "OSDiagRunById";
            RedirectRequestActionEnum[RedirectRequestActionEnum["SysDiagStart"] = 8] = "SysDiagStart";
            RedirectRequestActionEnum[RedirectRequestActionEnum["ModuleBasedDiagStart"] = 9] = "ModuleBasedDiagStart";
        })(RedirectRequestActionEnum = Operation.RedirectRequestActionEnum || (Operation.RedirectRequestActionEnum = {}));
    })(Operation = LSBV4.Operation || (LSBV4.Operation = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var CommandTypeEnum;
        (function (CommandTypeEnum) {
            CommandTypeEnum[CommandTypeEnum["Scan"] = 0] = "Scan";
            CommandTypeEnum[CommandTypeEnum["ContinuousScan"] = 1] = "ContinuousScan";
            CommandTypeEnum[CommandTypeEnum["ScanStatus"] = 2] = "ScanStatus";
            CommandTypeEnum[CommandTypeEnum["ScanCancel"] = 3] = "ScanCancel";
            CommandTypeEnum[CommandTypeEnum["ScanPause"] = 4] = "ScanPause";
            CommandTypeEnum[CommandTypeEnum["ScanResume"] = 5] = "ScanResume";
            CommandTypeEnum[CommandTypeEnum["ContinuousScanResume"] = 6] = "ContinuousScanResume";
            CommandTypeEnum[CommandTypeEnum["InstallPackage"] = 7] = "InstallPackage";
            CommandTypeEnum[CommandTypeEnum["ContinuousInstallPackage"] = 8] = "ContinuousInstallPackage";
            CommandTypeEnum[CommandTypeEnum["InstallApp"] = 9] = "InstallApp";
            CommandTypeEnum[CommandTypeEnum["InstallAppCancel"] = 10] = "InstallAppCancel";
            CommandTypeEnum[CommandTypeEnum["DownloadAppCancel"] = 11] = "DownloadAppCancel";
            CommandTypeEnum[CommandTypeEnum["Run"] = 12] = "Run";
            CommandTypeEnum[CommandTypeEnum["ContinuousRun"] = 13] = "ContinuousRun";
            CommandTypeEnum[CommandTypeEnum["RunById"] = 14] = "RunById";
            CommandTypeEnum[CommandTypeEnum["ContinuousRunById"] = 15] = "ContinuousRunById";
            CommandTypeEnum[CommandTypeEnum["CheckStatus"] = 16] = "CheckStatus";
            CommandTypeEnum[CommandTypeEnum["CheckLSBUpdateAndScan"] = 17] = "CheckLSBUpdateAndScan";
            CommandTypeEnum[CommandTypeEnum["CancelWithOutCommunication"] = 18] = "CancelWithOutCommunication";
            CommandTypeEnum[CommandTypeEnum["ScanStatusForVA"] = 19] = "ScanStatusForVA";
        })(CommandTypeEnum = Component.CommandTypeEnum || (Component.CommandTypeEnum = {}));
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var Command = (function () {
            function Command(commandType, operationRequests, isExclusive) {
                this.IsExclusive = false;
                this.CommandType = commandType;
                this.OperationRequests = operationRequests;
                this.IsExclusive = isExclusive;
            }
            return Command;
        }());
        Component.Command = Command;
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var ComponentTypeEnum;
        (function (ComponentTypeEnum) {
            ComponentTypeEnum[ComponentTypeEnum["Detect"] = 0] = "Detect";
            ComponentTypeEnum[ComponentTypeEnum["DetectForHTTPPage"] = 1] = "DetectForHTTPPage";
            ComponentTypeEnum[ComponentTypeEnum["ADUP"] = 2] = "ADUP";
            ComponentTypeEnum[ComponentTypeEnum["ADUPForHTTPPage"] = 3] = "ADUPForHTTPPage";
            ComponentTypeEnum[ComponentTypeEnum["SysDiag"] = 4] = "SysDiag";
            ComponentTypeEnum[ComponentTypeEnum["SysDiagForHTTPPage"] = 5] = "SysDiagForHTTPPage";
            ComponentTypeEnum[ComponentTypeEnum["OSDiag"] = 6] = "OSDiag";
            ComponentTypeEnum[ComponentTypeEnum["OSDiagForHTTPPage"] = 7] = "OSDiagForHTTPPage";
            ComponentTypeEnum[ComponentTypeEnum["DLM"] = 8] = "DLM";
            ComponentTypeEnum[ComponentTypeEnum["DLMForHTTPPage"] = 9] = "DLMForHTTPPage";
            ComponentTypeEnum[ComponentTypeEnum["LSBInstall"] = 10] = "LSBInstall";
        })(ComponentTypeEnum = Component.ComponentTypeEnum || (Component.ComponentTypeEnum = {}));
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var AbstractComponent = (function () {
            function AbstractComponent(componentType) {
                this._isRunning = false;
                this._commands = [];
                this._componentType = componentType;
            }
            AbstractComponent.prototype._runNextOperation = function (currentOperationRequest, operations, deferredObj, requestData, index, uniqueKey) {
                var _this = this;
                if (currentOperationRequest.Async === false) {
                    this._runOperationsWithDeferredObj(operations, deferredObj, requestData, index, uniqueKey);
                }
                else {
                    var interval = currentOperationRequest.Interval == null ?
                        LSBV4.Utility.HTTP_REQUEST_INTERVAL :
                        currentOperationRequest.Interval;
                    setTimeout(function () {
                        _this._runOperationsWithDeferredObj(operations, deferredObj, requestData, index, uniqueKey);
                    }, interval);
                }
            };
            AbstractComponent.prototype._runOperationsWithDeferredObj = function (operations, deferredObj, requestData, index, uniqueKey) {
                var _this = this;
                var currentOperationRequest = operations[index];
                if (currentOperationRequest.SendDataWhenRequest === true) {
                    if (currentOperationRequest.SendFixedData === false) {
                        currentOperationRequest.RequestData = requestData;
                    }
                }
                currentOperationRequest.Operation.Send(currentOperationRequest).done(function (data) {
                    if (currentOperationRequest.DataHandler != null
                        && currentOperationRequest.DataHandler(uniqueKey, data) !== true) {
                        deferredObj.reject();
                        return;
                    }
                    var nextBranchVersion = currentOperationRequest.NextBranchVersion == null ? currentOperationRequest.BranchVersion : currentOperationRequest.NextBranchVersion;
                    if (nextBranchVersion !== currentOperationRequest.BranchVersion) {
                        LSBV4.Utility.Log('Branch version switch to ' + nextBranchVersion);
                    }
                    if (currentOperationRequest.BranchVersion === nextBranchVersion
                        && currentOperationRequest.IsLoopExecution() === true
                        && currentOperationRequest.IsLoopFinished() != null
                        && currentOperationRequest.IsLoopFinished()(data) === false) {
                        _this.TriggerEvent(currentOperationRequest.SuccessEventType, uniqueKey, data);
                        _this._runNextOperation(currentOperationRequest, operations, deferredObj, requestData, index, uniqueKey);
                    }
                    else {
                        _this.TriggerEvent(currentOperationRequest.SuccessEventType, uniqueKey, data);
                        index++;
                        while (index <= operations.length) {
                            if (index === operations.length) {
                                deferredObj.resolve();
                                break;
                            }
                            else {
                                if (operations[index].BranchVersion === nextBranchVersion) {
                                    _this._runNextOperation(currentOperationRequest, operations, deferredObj, requestData, index, uniqueKey);
                                    break;
                                }
                                else {
                                    index++;
                                }
                            }
                        }
                    }
                }).fail(function (data) {
                    if (data != null && data.NoLSBAndCancelled != null && data.NoLSBAndCancelled === true) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.UserCancelled, uniqueKey, data);
                    }
                    else {
                        _this.TriggerEvent(currentOperationRequest.FailedEventType, uniqueKey, data);
                    }
                    deferredObj.reject();
                });
            };
            AbstractComponent.prototype._runOperations = function (operations, requestData, index, uniqueKey) {
                var deferredObj = $.Deferred();
                if (operations != null && operations.length > 0) {
                    this._runOperationsWithDeferredObj(operations, deferredObj, requestData, index, uniqueKey);
                }
                else {
                    deferredObj.resolve();
                }
                return deferredObj.promise();
            };
            AbstractComponent.prototype._checkExclusive = function () {
                if (this._isRunning === true) {
                    LSBV4.Utility.Log('Execution is running, ignore duplicated exec');
                    return true;
                }
                return false;
            };
            AbstractComponent.prototype.IsRunning = function () {
                return this._isRunning;
            };
            AbstractComponent.prototype.GetComponentType = function () {
                return this._componentType;
            };
            AbstractComponent.prototype.TriggerEvent = function (eventType, uniqueKey, data) {
                var ignoreUniqueKey = AbstractComponent._noNeedUniqueKeyEvent.some(function (e) {
                    return e === eventType;
                });
                if ((ignoreUniqueKey === true || (uniqueKey != null && uniqueKey != ''))
                    && eventType !== LSBV4.Utility.EventTypeEnum.NoEvent
                    && LSBV4.Utility.EVENT_ARRAY != null && LSBV4.Utility.EVENT_ARRAY.length > 0) {
                    LSBV4.Utility.Log('Event: ' + LSBV4.Utility.EventTypeEnum[eventType] + ' triggered');
                    var matchedEvents = LSBV4.Utility.EVENT_ARRAY.filter(function (ev) {
                        return ev.EventType === eventType
                            && (ignoreUniqueKey === true || ev.uniqueKey === uniqueKey);
                    });
                    if (matchedEvents != null && matchedEvents.length > 0) {
                        matchedEvents.forEach(function (eventHandler, index) {
                            setTimeout(function () {
                                eventHandler.EventHandler(data, eventHandler.EventType);
                            });
                        });
                        setTimeout(function () {
                            LSBV4.Utility.LAST_EVENT_TYPE = eventType;
                        });
                    }
                }
            };
            AbstractComponent.prototype.RegisterCommand = function (command) {
                if (this._commands.some(function (c) {
                    return c.CommandType === command.CommandType;
                }) === true) {
                    LSBV4.Utility.Log('Register command failed, command with type ' + LSBV4.Component.CommandTypeEnum[command.CommandType] + ' has been registered, the old one will be overwritten');
                    return;
                }
                this._commands.push(command);
            };
            AbstractComponent.prototype.ExecCommand = function (commandType, uniqueKey, requestData) {
                var _this = this;
                if (requestData === void 0) { requestData = null; }
                if (this._commands != null && this._commands.length > 0
                    && uniqueKey != null && uniqueKey != '') {
                    var existedCommand = this._commands.filter(function (c) {
                        return c.CommandType === commandType;
                    });
                    if (existedCommand != null && existedCommand.length > 0) {
                        var command_1 = existedCommand[0];
                        if (command_1.IsExclusive === true) {
                            if (this._checkExclusive() === true) {
                                return;
                            }
                            this._isRunning = true;
                        }
                        command_1.OperationRequests.forEach(function (request) {
                            request.NextBranchVersion = null;
                        });
                        this._runOperations(command_1.OperationRequests, requestData, 0, uniqueKey).always(function () {
                            if (command_1.IsExclusive === true) {
                                _this._isRunning = false;
                            }
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.CommandFinished, uniqueKey, { CommandType: commandType });
                        }).fail(function () {
                            var failedOperations = command_1.OperationRequests.filter(function (oper) {
                                return oper.RunWhenFailed === true;
                            });
                            if (failedOperations != null && failedOperations.length > 0) {
                                _this._runOperations(failedOperations, null, 0, uniqueKey);
                            }
                        });
                    }
                    else {
                        LSBV4.Utility.Log('Exec command failed, command with type ' + LSBV4.Component.CommandTypeEnum[commandType] + ' is not registered');
                    }
                }
            };
            AbstractComponent.RegisterIgnoreUniqueKeyEvent = function (event) {
                this._noNeedUniqueKeyEvent.push(event);
            };
            AbstractComponent._noNeedUniqueKeyEvent = [];
            return AbstractComponent;
        }());
        Component.AbstractComponent = AbstractComponent;
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var ADUPForHTTPPageV4 = (function (_super) {
            __extends(ADUPForHTTPPageV4, _super);
            function ADUPForHTTPPageV4(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._redirectOperation = LSBV4.Operation.RedirectOperation.GetSingleton();
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._initScanCommand();
                _this._initContinuousScanCommand();
                _this._initInstallPackageCommand();
                _this._initContinuousInstallPackageCommand();
                return _this;
            }
            ADUPForHTTPPageV4.prototype._initScanCommand = function () {
                var scanOperations = [];
                var scanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'Adup2', false, this._corsOperation, true);
                scanOper.Timeout = 5000;
                scanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                scanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                scanOperations.push(scanOper);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.Scan, scanOperations, true);
                this.RegisterCommand(scanCommand);
            };
            ADUPForHTTPPageV4.prototype._initContinuousScanCommand = function () {
                var continuousScanOperations = [];
                var continuousScanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'Adup2', false, this._corsOperation, true);
                continuousScanOper.Timeout = 5000;
                continuousScanOper.RetryInPeroid = true;
                continuousScanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                continuousScanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                continuousScanOperations.push(continuousScanOper);
                var continuousScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ContinuousScan, continuousScanOperations, true);
                this.RegisterCommand(continuousScanCommand);
            };
            ADUPForHTTPPageV4.prototype._initInstallPackageCommand = function () {
                var installPackageOperations = [];
                var scanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'AdupInstall', true, this._corsOperation, true);
                scanOper.Timeout = 5000;
                scanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                scanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                installPackageOperations.push(scanOper);
                var installPackageCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.InstallPackage, installPackageOperations, true);
                this.RegisterCommand(installPackageCommand);
            };
            ADUPForHTTPPageV4.prototype._initContinuousInstallPackageCommand = function () {
                var continuousInstallPackageOperations = [];
                var continuousScanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'AdupInstall', true, this._corsOperation, true);
                continuousScanOper.Timeout = 5000;
                continuousScanOper.RetryInPeroid = true;
                continuousScanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                continuousScanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                continuousInstallPackageOperations.push(continuousScanOper);
                var continuousInstallPackageCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ContinuousInstallPackage, continuousInstallPackageOperations, true);
                this.RegisterCommand(continuousInstallPackageCommand);
            };
            return ADUPForHTTPPageV4;
        }(Component.AbstractComponent));
        Component.ADUPForHTTPPageV4 = ADUPForHTTPPageV4;
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var ADUPV1 = (function (_super) {
            __extends(ADUPV1, _super);
            function ADUPV1(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._redirectOperation = LSBV4.Operation.RedirectOperation.GetSingleton();
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._customOperation = LSBV4.Operation.CustomOperation.GetSingleton();
                _this._tvsuUrl = '';
                _this._tvsuFileId = '';
                _this._tvsuVersion = '';
                _this._initScanStatusCommand();
                _this._initCancelScanCommand();
                _this._initInstallPackageCommand();
                _this._initInstallTVSUCommand();
                _this._initCancelInstallTVSUCommand();
                return _this;
            }
            ADUPV1.prototype._dlmCommonExceptionDataHander = function (data, componentObj, uniqueKey) {
                switch (data.Exception) {
                    case Component.DLMExceptionEnum.UserCancelSelectingLocation:
                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.UserCancelSelectingLocation, uniqueKey, data);
                        return false;
                    case Component.DLMExceptionEnum.NotEnoughDiskSpace:
                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.NotEnoughDiskSpace, uniqueKey, data);
                        return false;
                    case Component.DLMExceptionEnum.UnhandledException:
                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.UnhandledException, uniqueKey, data);
                        return false;
                    case Component.DLMExceptionEnum.WrongRequest:
                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.WrongRequest, uniqueKey, data);
                        return false;
                    default:
                        return true;
                }
            };
            ADUPV1.prototype._scanStatusLoopHandler = function (data) {
                var statusList = data.Data;
                if (statusList != null && statusList.length > 0) {
                    var status_1 = parseInt(statusList[0].status);
                    var exception = parseInt(data.Exception);
                    var stopped = false;
                    stopped = ADUPV1._isCancelled === true || (exception != null && exception !== Component.DLMExceptionEnum.None) || (status_1 != null && (status_1 === Component.DownloadStatus.Canceled || status_1 === Component.DownloadStatus.Completed || status_1 === Component.DownloadStatus.Paused || status_1 === Component.DownloadStatus.Canceled));
                    return stopped;
                }
                return false;
            };
            ADUPV1.prototype._scanStatusHandler = function (data, componentObj, uniqueKey, request, nextBranchVersion) {
                if (this._dlmCommonExceptionDataHander(data, componentObj, uniqueKey) !== true) {
                    return false;
                }
                var callbackStr = (data.Callback == null) ? 'DLM' : data.Callback.trim();
                if (callbackStr === 'ADUP') {
                    if (data.Data != null) {
                        var statusList = data.Data;
                        if (statusList != null && statusList.length > 0) {
                            var status_2 = parseInt(statusList[0].status);
                            if (status_2 != null) {
                                switch (status_2) {
                                    case Component.DownloadStatus.Downloading:
                                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadTVSUStatus, uniqueKey, data);
                                        break;
                                    case Component.DownloadStatus.Waiting:
                                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                                        break;
                                    case Component.DownloadStatus.Canceled:
                                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadTVSUCancel, uniqueKey, data);
                                        return false;
                                    case Component.DownloadStatus.Completed:
                                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadTVSUStatus, uniqueKey, data);
                                        break;
                                    case Component.DownloadStatus.Paused:
                                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadTVSUPause, uniqueKey, data);
                                        return false;
                                    case Component.DownloadStatus.Error:
                                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadTVSUError, uniqueKey, data);
                                        return false;
                                    default:
                                        break;
                                }
                            }
                        }
                    }
                }
                return true;
            };
            ADUPV1.prototype._adup2CommonExceptionDataHander = function (data, uniqueKey) {
                var exception = parseInt(data.Exception);
                switch (exception) {
                    case Component.ADUPExceptionEnum.SystemNotSupport:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.SystemNotSupport, uniqueKey, data);
                        return false;
                    case Component.ADUPExceptionEnum.NoTVSU:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NoTVSU, uniqueKey, data);
                        return false;
                    case Component.ADUPExceptionEnum.ErrorLaunchTVSU:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ErrorLaunchTVSU, uniqueKey, data);
                        return false;
                    case Component.ADUPExceptionEnum.ErrorDownloadTVSU:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ErrorDownloadTVSU, uniqueKey, data);
                        return false;
                    case Component.ADUPExceptionEnum.UnhandledException:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.UnhandledException, uniqueKey, data);
                        return false;
                    case Component.ADUPExceptionEnum.WrongRequest:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.WrongRequest, uniqueKey, data);
                        return false;
                    case Component.ADUPExceptionEnum.NotLenovo:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NotLenovo, uniqueKey, data);
                        return false;
                    case Component.ADUPExceptionEnum.LowVersion:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.LowVersion, uniqueKey, data);
                        return false;
                    case Component.ADUPExceptionEnum.ErrorInstallTVSU:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.InstallTVSUFailed, uniqueKey, data);
                        return false;
                    case Component.ADUPExceptionEnum.None:
                    case Component.ADUPExceptionEnum.Waiting:
                        return true;
                    default:
                        LSBV4.Utility.Log('Unexpected exception');
                        return false;
                }
            };
            ADUPV1.prototype._initScanStatusCommand = function () {
                var _this = this;
                var scanStatusOperations = [];
                var initOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    ADUPV1._isCancelled = false;
                    return true;
                }, this._customOperation);
                initOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPFailed;
                scanStatusOperations.push(initOper);
                var cancelPingOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    return ADUPV1._isCancelled !== true;
                }, this._customOperation);
                scanStatusOperations.push(cancelPingOper);
                var scanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'adup/doupdate', false, this._corsOperation, true);
                scanOper.DataHandler = function (uniqueKey, data) {
                    var exception = parseInt(data.Exception);
                    switch (exception) {
                        case Component.ADUPExceptionEnum.None:
                            if (data.Progress == null) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPStatusSuccess, uniqueKey, data);
                            }
                            return true;
                        case Component.ADUPExceptionEnum.Waiting:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                            return true;
                        default:
                            return _this._adup2CommonExceptionDataHander(data, uniqueKey);
                    }
                };
                scanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPFailed;
                scanStatusOperations.push(scanOper);
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'adup/scanningstatus', false, this._corsOperation, true);
                scanStatusOper.SetLoopExecution(true, function (data) {
                    var exception = parseInt(data.Exception);
                    var process = parseInt(data.Progress);
                    return (exception !== Component.ADUPExceptionEnum.None && exception !== Component.ADUPExceptionEnum.Waiting)
                        || (process === 100 || process < 0 || ADUPV1._isCancelled === true);
                });
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    if (_this._adup2CommonExceptionDataHander(data, uniqueKey) === true) {
                        if (ADUPV1._isCancelled === true) {
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPCancelSuccess, uniqueKey, data);
                        }
                        else {
                            switch (data.Exception) {
                                case Component.ADUPExceptionEnum.None:
                                    if (data.Progress == null) {
                                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                                    }
                                    else {
                                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPStatusSuccess, uniqueKey, data);
                                    }
                                    return true;
                                case Component.ADUPExceptionEnum.Waiting:
                                    _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                                    return true;
                                default:
                                    break;
                            }
                        }
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                scanStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPFailed;
                scanStatusOperations.push(scanStatusOper);
                var scanStatusCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanStatus, scanStatusOperations, true);
                this.RegisterCommand(scanStatusCommand);
            };
            ADUPV1.prototype._initCancelScanCommand = function () {
                var cancelScanOperations = [];
                var cancelScanLSBOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'adup/adupcancelscan', false, this._corsOperation, true);
                cancelScanLSBOper.NoResponseCall = true;
                cancelScanLSBOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPCancelFailed;
                cancelScanOperations.push(cancelScanLSBOper);
                var cancelOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    ADUPV1._isCancelled = true;
                    return true;
                }, this._customOperation);
                cancelOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPCancelFailed;
                cancelScanOperations.push(cancelOper);
                var cancelScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanCancel, cancelScanOperations, false);
                this.RegisterCommand(cancelScanCommand);
            };
            ADUPV1.prototype._initInstallPackageCommand = function () {
                var _this = this;
                var installPackageOperations = [];
                var initOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    ADUPV1._isCancelled = false;
                    return true;
                }, this._customOperation);
                initOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPInstallPackageFailed;
                installPackageOperations.push(initOper);
                var postOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'adup/installpackages', true, this._corsOperation, true);
                postOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPInstallPackageFailed;
                installPackageOperations.push(postOper);
                var confirmStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'adup/checkconfirmation', false, this._corsOperation, true);
                confirmStatusOper.Interval = 2000;
                confirmStatusOper.SetLoopExecution(true, function (data) {
                    var exception = parseInt(data.Exception);
                    return (exception != null && exception !== Component.ADUPExceptionEnum.None && exception !== Component.ADUPExceptionEnum.Waiting)
                        || (data.Confirmation != null && data.Confirmation !== "Wait");
                });
                confirmStatusOper.DataHandler = function (uniqueKey, data) {
                    if (_this._adup2CommonExceptionDataHander(data, uniqueKey) === true) {
                        if (data.Confirmation === "No") {
                            ADUPV1._isCancelled = true;
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPInstallConfirmNo, uniqueKey, data);
                        }
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                confirmStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPInstallPackageFailed;
                installPackageOperations.push(confirmStatusOper);
                var cancelOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    return !ADUPV1._isCancelled;
                }, this._customOperation);
                installPackageOperations.push(cancelOper);
                var installStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'adup/installstatus', false, this._corsOperation, true);
                installStatusOper.SetLoopExecution(true, function (data) {
                    var exception = parseInt(data.Exception);
                    var action = parseInt(data.Action);
                    return (exception != null && exception !== Component.ADUPExceptionEnum.None && exception !== Component.ADUPExceptionEnum.Waiting)
                        || (exception != null && exception === Component.ADUPExceptionEnum.None && action != null && action === Component.InstallPackageActionEnum.Done);
                });
                installStatusOper.DataHandler = function (uniqueKey, data) {
                    if (_this._adup2CommonExceptionDataHander(data, uniqueKey) === true) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPInstallStatus, uniqueKey, data);
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                installStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPInstallPackageFailed;
                installPackageOperations.push(installStatusOper);
                var installPackageCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.InstallPackage, installPackageOperations, true);
                this.RegisterCommand(installPackageCommand);
            };
            ADUPV1.prototype._initInstallTVSUCommand = function () {
                var _this = this;
                var installTVSUOperations = [];
                var postOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'adup/installsu', true, this._corsOperation, true);
                postOper.SendFixedData = true;
                this._tvsuUrl = 'https://download.lenovo.com/pccbbs/thinkvantage_en/systemupdate5.07.0042.exe';
                this._tvsuFileId = 'tvsu';
                this._tvsuVersion = '5.07.0042';
                var sendInfoArray = [];
                var tvsuDLInfo = new LSBV4.Utility.DownloadFilesInfo();
                tvsuDLInfo.FileId = this._tvsuFileId;
                tvsuDLInfo.Name = this._tvsuUrl.substring(this._tvsuUrl.lastIndexOf("/") + 1, this._tvsuUrl.length);
                tvsuDLInfo.DSName = "TVSU";
                tvsuDLInfo.Url = this._tvsuUrl;
                tvsuDLInfo.Version = this._tvsuVersion;
                sendInfoArray.push(tvsuDLInfo);
                postOper.RequestData = JSON.stringify(sendInfoArray);
                postOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallTVSUFailed;
                installTVSUOperations.push(postOper);
                var resetOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    ADUPV1._isCancelled = false;
                    return true;
                }, this._customOperation);
                resetOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallTVSUFailed;
                installTVSUOperations.push(resetOper);
                var downloadTVSUStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'adup/downloadstatus', false, this._corsOperation, true);
                downloadTVSUStatusOper.SetLoopExecution(true, function (data) {
                    return _this._scanStatusLoopHandler(data);
                });
                downloadTVSUStatusOper.DataHandler = function (uniqueKey, data) {
                    return _this._scanStatusHandler(data, _this, uniqueKey);
                };
                downloadTVSUStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallTVSUFailed;
                installTVSUOperations.push(downloadTVSUStatusOper);
                var initOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    ADUPV1._isCancelled = false;
                    return true;
                }, this._customOperation);
                initOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPFailed;
                installTVSUOperations.push(initOper);
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'adup/scanningstatus', false, this._corsOperation, true);
                scanStatusOper.SetLoopExecution(true, function (data) {
                    var exception = parseInt(data.Exception);
                    var process = parseInt(data.Progress);
                    return (exception !== Component.ADUPExceptionEnum.None && exception !== Component.ADUPExceptionEnum.Waiting)
                        || (process === 100 || process < 0 || ADUPV1._isCancelled === true);
                });
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    if (_this._adup2CommonExceptionDataHander(data, uniqueKey) === true) {
                        if (ADUPV1._isCancelled === true) {
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPCancelSuccess, uniqueKey, data);
                        }
                        else {
                            switch (data.Exception) {
                                case Component.ADUPExceptionEnum.None:
                                    if (data.Progress == null) {
                                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                                    }
                                    else {
                                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPStatusSuccess, uniqueKey, data);
                                    }
                                    return true;
                                case Component.ADUPExceptionEnum.Waiting:
                                    _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                                    return true;
                                default:
                                    break;
                            }
                        }
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                scanStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPFailed;
                installTVSUOperations.push(scanStatusOper);
                var installTVSUCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.InstallApp, installTVSUOperations, true);
                this.RegisterCommand(installTVSUCommand);
            };
            ADUPV1.prototype._initCancelInstallTVSUCommand = function () {
                var cancelScanOperations = [];
                var cancelScanLSBOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'adup/cancelsudownload', false, this._corsOperation, true);
                cancelScanLSBOper.NoResponseCall = true;
                cancelScanLSBOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallTVSUCancelFailed;
                cancelScanOperations.push(cancelScanLSBOper);
                var cancelOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    ADUPV1._isCancelled = true;
                    return true;
                }, this._customOperation);
                cancelOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPCancelFailed;
                cancelScanOperations.push(cancelOper);
                var cancelScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.InstallAppCancel, cancelScanOperations, false);
                this.RegisterCommand(cancelScanCommand);
            };
            ADUPV1._isCancelled = false;
            ADUPV1.TVSU_DOWNLOAD_URL = 'https://download.lenovo.com/pccbbs/thinkvantage_en/systemupdate5.07.0042.exe';
            return ADUPV1;
        }(Component.AbstractComponent));
        Component.ADUPV1 = ADUPV1;
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var ADUPV4 = (function (_super) {
            __extends(ADUPV4, _super);
            function ADUPV4(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._redirectOperation = LSBV4.Operation.RedirectOperation.GetSingleton();
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._customOperation = LSBV4.Operation.CustomOperation.GetSingleton();
                _this._tvsuUrl = '';
                _this._tvsuFileId = '';
                _this._tvsuVersion = '';
                _this._initScanStatusCommand();
                _this._initCancelScanCommand();
                _this._initInstallPackageCommand();
                _this._initInstallTVSUCommand();
                _this._initCancelInstallTVSUCommand();
                _this._initCancelInstallTVSUCommandAtStart();
                return _this;
            }
            ADUPV4.prototype._adup2CommonExceptionDataHander = function (data, uniqueKey, feedbackOper) {
                var _this = this;
                switch (data.Exception) {
                    case ADUPExceptionEnum.SystemNotSupport:
                        if (feedbackOper == null)
                            this.TriggerEvent(LSBV4.Utility.EventTypeEnum.SystemNotSupport, uniqueKey, data);
                        else
                            feedbackOper.action = function () {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.SystemNotSupport, uniqueKey, data);
                                return true;
                            };
                        return false;
                    case ADUPExceptionEnum.NoTVSU:
                        if (feedbackOper == null)
                            this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NoTVSU, uniqueKey, data);
                        else
                            feedbackOper.action = function () {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NoTVSU, uniqueKey, data);
                                return true;
                            };
                        return false;
                    case ADUPExceptionEnum.ErrorLaunchTVSU:
                        if (feedbackOper == null)
                            this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ErrorLaunchTVSU, uniqueKey, data);
                        else
                            feedbackOper.action = function () {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ErrorLaunchTVSU, uniqueKey, data);
                                return true;
                            };
                        return false;
                    case ADUPExceptionEnum.ErrorDownloadTVSU:
                        if (feedbackOper == null)
                            this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ErrorDownloadTVSU, uniqueKey, data);
                        else
                            feedbackOper.action = function () {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ErrorDownloadTVSU, uniqueKey, data);
                                return true;
                            };
                        return false;
                    case ADUPExceptionEnum.UnhandledException:
                        if (feedbackOper == null)
                            this.TriggerEvent(LSBV4.Utility.EventTypeEnum.UnhandledException, uniqueKey, data);
                        else
                            feedbackOper.action = function () {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.UnhandledException, uniqueKey, data);
                                return true;
                            };
                        return false;
                    case ADUPExceptionEnum.WrongRequest:
                        if (feedbackOper == null)
                            this.TriggerEvent(LSBV4.Utility.EventTypeEnum.WrongRequest, uniqueKey, data);
                        else
                            feedbackOper.action = function () {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.WrongRequest, uniqueKey, data);
                                return true;
                            };
                        return false;
                    case ADUPExceptionEnum.NotLenovo:
                        if (feedbackOper == null)
                            this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NotLenovo, uniqueKey, data);
                        else
                            feedbackOper.action = function () {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NotLenovo, uniqueKey, data);
                                return true;
                            };
                        return false;
                    case ADUPExceptionEnum.LowVersion:
                        if (feedbackOper == null)
                            this.TriggerEvent(LSBV4.Utility.EventTypeEnum.LowVersion, uniqueKey, data);
                        else
                            feedbackOper.action = function () {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.LowVersion, uniqueKey, data);
                                return true;
                            };
                        return false;
                    case ADUPExceptionEnum.TVSUUpdateFailed:
                        if (feedbackOper == null)
                            this.TriggerEvent(LSBV4.Utility.EventTypeEnum.TVSUUpdateFailed, uniqueKey, data);
                        else
                            feedbackOper.action = function () {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.TVSUUpdateFailed, uniqueKey, data);
                                return true;
                            };
                        return false;
                    case ADUPExceptionEnum.None:
                    case ADUPExceptionEnum.Waiting:
                        return true;
                    default:
                        LSBV4.Utility.Log('Unexpected exception');
                        return false;
                }
            };
            ADUPV4.prototype._initScanStatusCommand = function () {
                var _this = this;
                var scanStatusOperations = [];
                var scanRedirectOper = new LSBV4.Operation.RedirectRequest(LSBV4.Operation.RedirectRequestActionEnum.ADUPStart, this._redirectOperation);
                scanRedirectOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPFailed;
                scanRedirectOper.DataHandler = function (uniqueKey, data) {
                    if (data != null && data.returnCode != null && data.returnCode === 3) {
                        LSBV4.Utility.Log("Get progress status: " + data.progressStatus);
                        if (data.progressStatus != null) {
                            switch (data.progressStatus) {
                                case 1:
                                    scanRedirectOper.NextBranchVersion = 1;
                                    break;
                                case 2:
                                    scanRedirectOper.NextBranchVersion = 2;
                                    break;
                                case 4:
                                    scanRedirectOper.NextBranchVersion = 3;
                                    break;
                                case 5:
                                    scanRedirectOper.NextBranchVersion = 4;
                                    break;
                                case 6:
                                    scanRedirectOper.NextBranchVersion = 5;
                                    break;
                                case 7:
                                    _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NoTVSU, uniqueKey, { Exception: LSBV4.Component.ADUPExceptionEnum.NoTVSU });
                                    scanRedirectOper.NextBranchVersion = 6;
                                    break;
                                default:
                                    LSBV4.Utility.Log("Unknow progress status: " + data.progressStatus);
                                    break;
                            }
                        }
                        else {
                            LSBV4.Utility.Log("No progress status: " + data.progressStatus);
                        }
                    }
                    return true;
                };
                scanStatusOperations.push(scanRedirectOper);
                var delScanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'AdupScanData~TvsuDlData~AdupInstallData~TVSUInstallData~AdupNxtCmd', false, this._corsOperation);
                delScanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPFailed;
                scanStatusOperations.push(delScanOper);
                this._addDetectOperation(scanStatusOperations);
                this._addADUPOperationToScanStatus(scanStatusOperations);
                this._addScanOperation(scanStatusOperations, LSBV4.Utility.EventTypeEnum.ADUPFailed);
                this._addDetectOperation(scanStatusOperations, 1);
                this._addADUPOperationToScanStatus(scanStatusOperations, 1);
                this._addScanOperation(scanStatusOperations, LSBV4.Utility.EventTypeEnum.ADUPFailed, 1);
                this._addDetectOperation(scanStatusOperations, 2);
                this._addScanOperation(scanStatusOperations, LSBV4.Utility.EventTypeEnum.ADUPFailed, 2);
                this._addDetectOperation(scanStatusOperations, 3);
                this._addDLOperationToInstallTVSU(scanStatusOperations, 3);
                this._addTVSUInstallOperationToInstallTVSU(scanStatusOperations, 3);
                this._addScanOperation(scanStatusOperations, LSBV4.Utility.EventTypeEnum.ADUPFailed, 3);
                this._addDetectOperation(scanStatusOperations, 4);
                this._addTVSUInstallOperationToInstallTVSU(scanStatusOperations, 4);
                this._addScanOperation(scanStatusOperations, LSBV4.Utility.EventTypeEnum.ADUPFailed, 4);
                this._addDetectOperation(scanStatusOperations, 5);
                this._addScanOperation(scanStatusOperations, LSBV4.Utility.EventTypeEnum.ADUPFailed, 5);
                var scanStatusCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanStatus, scanStatusOperations, true);
                this.RegisterCommand(scanStatusCommand);
            };
            ADUPV4.prototype._addDetectOperation = function (scanStatusOperations, branchVersion) {
                var _this = this;
                if (branchVersion === void 0) { branchVersion = 0; }
                var scanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'ADUPDetectData', false, this._corsOperation);
                scanOper.RetryInPeroid = true;
                scanOper.BranchVersion = branchVersion;
                scanOper.DataHandler = function (uniqueKey, data) {
                    if (data.Exception !== Component.DetectExceptionEnum.None) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NotLenovo, uniqueKey, data);
                    }
                    return true;
                };
                scanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.ADUPDetectInfoSuccess;
                scanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPFailed;
                scanStatusOperations.push(scanOper);
            };
            ADUPV4.prototype._addADUPOperationToScanStatus = function (scanStatusOperations, branchVersion) {
                var _this = this;
                if (branchVersion === void 0) { branchVersion = 0; }
                var scanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'AdupData', false, this._corsOperation);
                scanOper.BranchVersion = branchVersion;
                scanOper.RetryInPeroid = true;
                scanOper.DataHandler = function (uniqueKey, data) {
                    switch (data.Exception) {
                        case ADUPExceptionEnum.None:
                            if (data.Progress == null) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPSuccess, uniqueKey, data);
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPSuccess, uniqueKey, data);
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPStatusSuccess, uniqueKey, data);
                            }
                            return true;
                        case ADUPExceptionEnum.Waiting:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                            return true;
                        default:
                            return _this._adup2CommonExceptionDataHander(data, uniqueKey);
                    }
                };
                scanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPFailed;
                scanStatusOperations.push(scanOper);
            };
            ADUPV4.prototype._addScanOperation = function (scanStatusOperations, failedEvent, branchVersion) {
                var _this = this;
                if (branchVersion === void 0) { branchVersion = 0; }
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'AdupScanData', false, this._corsOperation);
                scanStatusOper.BranchVersion = branchVersion;
                scanStatusOper.SetLoopExecution(true, function (data) {
                    var exception = data.Exception;
                    var process = data.Progress;
                    return (exception !== ADUPExceptionEnum.None && exception !== ADUPExceptionEnum.Waiting)
                        || (process === 100 || process < 0 || data.IsCanceled === true);
                });
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    if (_this._adup2CommonExceptionDataHander(data, uniqueKey) === true) {
                        if (data.IsCanceled === true) {
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPCancelSuccess, uniqueKey, data);
                        }
                        else {
                            switch (data.Exception) {
                                case ADUPExceptionEnum.None:
                                    if (data.Progress == null) {
                                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                                    }
                                    else {
                                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPStatusSuccess, uniqueKey, data);
                                    }
                                    return true;
                                case ADUPExceptionEnum.Waiting:
                                    _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                                    return true;
                                default:
                                    break;
                            }
                        }
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                scanStatusOper.FailedEventType = failedEvent;
                scanStatusOperations.push(scanStatusOper);
                var delScanOperWithNoEvent = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'AdupData~AdupScanData~TvsuDlData~AdupInstallData~TVSUInstallData~AdupNxtCmd', false, this._corsOperation);
                delScanOperWithNoEvent.BranchVersion = branchVersion;
                delScanOperWithNoEvent.RunWhenFailed = true;
                scanStatusOperations.push(delScanOperWithNoEvent);
                var finalOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    return true;
                }, this._customOperation);
                finalOper.RunWhenFailed = true;
                finalOper.BranchVersion = branchVersion;
                finalOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.ADUPStatusFinish;
                scanStatusOperations.push(finalOper);
            };
            ADUPV4.prototype._initCancelScanCommand = function () {
                var cancelScanOperations = [];
                var cancelScanLSBOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'AdupNxtCmd', true, this._corsOperation, false);
                cancelScanLSBOper.SendFixedData = true;
                cancelScanLSBOper.RequestData = 'AdupScanCancel';
                cancelScanLSBOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPCancelFailed;
                cancelScanOperations.push(cancelScanLSBOper);
                var cancelScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanCancel, cancelScanOperations, false);
                this.RegisterCommand(cancelScanCommand);
            };
            ADUPV4.prototype._initInstallPackageCommand = function () {
                var installPackageOperations = [];
                var finalOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    return true;
                }, this._customOperation);
                finalOper.RunWhenFailed = true;
                finalOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.ADUPInstallPackageProcessFinished;
                finalOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPInstallPackageFailed;
                var scanRedirectOper = new LSBV4.Operation.RedirectRequest(LSBV4.Operation.RedirectRequestActionEnum.ADUPInstall, this._redirectOperation, true);
                scanRedirectOper.DataHandler = function (uniqueKey, data) {
                    if (data != null && data.returnCode != null && data.returnCode === 3) {
                        if (data.progressStatus != null) {
                            switch (data.progressStatus) {
                                case 3:
                                    scanRedirectOper.NextBranchVersion = 1;
                                    break;
                                default:
                                    LSBV4.Utility.Log("Unknow progress status: " + data.progressStatus);
                                    break;
                            }
                        }
                        LSBV4.Utility.Log("No progress status: " + data.progressStatus);
                    }
                    return true;
                };
                scanRedirectOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPInstallPackageFailed;
                installPackageOperations.push(scanRedirectOper);
                var initOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    finalOper.action = function () { return true; };
                    return true;
                }, this._customOperation);
                initOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPInstallPackageFailed;
                installPackageOperations.push(initOper);
                var delInstallPackageOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'AdupNxtCmd', false, this._corsOperation);
                delInstallPackageOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPInstallPackageFailed;
                installPackageOperations.push(delInstallPackageOper);
                this._addInstallStatusOperationToInstallPackage(installPackageOperations, 0, finalOper);
                this._addInstallStatusOperationToInstallPackage(installPackageOperations, 1, finalOper);
                installPackageOperations.push(finalOper);
                var installPackageCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.InstallPackage, installPackageOperations, true);
                this.RegisterCommand(installPackageCommand);
            };
            ADUPV4.prototype._addInstallStatusOperationToInstallPackage = function (installPackageOperations, branchVersion, finalOper) {
                var _this = this;
                if (branchVersion === void 0) { branchVersion = 0; }
                var installStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'AdupInstallData', false, this._corsOperation);
                installStatusOper.BranchVersion = branchVersion;
                installStatusOper.RetryInPeroid = true;
                installStatusOper.SetLoopExecution(true, function (data) {
                    var exception = data.Exception;
                    var action = data.Action;
                    return (exception != null && exception !== ADUPExceptionEnum.None && exception !== ADUPExceptionEnum.Waiting)
                        || (exception != null && exception === ADUPExceptionEnum.None && action != null && action === InstallPackageActionEnum.Done)
                        || (data.Confirmation != null && data.Confirmation !== "Yes" && data.Confirmation !== "Wait");
                });
                installStatusOper.DataHandler = function (uniqueKey, data) {
                    if (_this._adup2CommonExceptionDataHander(data, uniqueKey, finalOper) === true) {
                        if (data.Confirmation === "No") {
                            finalOper.action = function () {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPInstallConfirmNo, uniqueKey, data);
                                return true;
                            };
                        }
                        else if (data.Confirmation === "Yes") {
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPInstallStatus, uniqueKey, data);
                        }
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                installStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPInstallPackageFailed;
                installPackageOperations.push(installStatusOper);
                var delInstallPackageOperWithNoEvent = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'AdupInstallData', false, this._corsOperation);
                delInstallPackageOperWithNoEvent.BranchVersion = branchVersion;
                delInstallPackageOperWithNoEvent.RunWhenFailed = true;
                installPackageOperations.push(delInstallPackageOperWithNoEvent);
            };
            ADUPV4.prototype._initInstallTVSUCommand = function (opertionList, branchVersion) {
                if (opertionList === void 0) { opertionList = null; }
                if (branchVersion === void 0) { branchVersion = 0; }
                var installTVSUOperations = opertionList == null ? [] : opertionList;
                var delInstallTVSUOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'TvsuDlData~TVSUInstallData~AdupNxtCmd', false, this._corsOperation);
                delInstallTVSUOper.BranchVersion = branchVersion;
                delInstallTVSUOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallTVSUFailed;
                installTVSUOperations.push(delInstallTVSUOper);
                var postOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'TvsuDlData', true, this._corsOperation);
                postOper.BranchVersion = branchVersion;
                postOper.SendFixedData = true;
                this._tvsuUrl = 'https://download.lenovo.com/tvsupackage';
                this._tvsuFileId = 'tvsu';
                this._tvsuVersion = '5.07.0070';
                var sendInfoArray = [];
                var tvsuDLInfo = new LSBV4.Utility.DownloadFilesInfo();
                tvsuDLInfo.FileId = this._tvsuFileId;
                tvsuDLInfo.Name = this._tvsuUrl.substring(this._tvsuUrl.lastIndexOf("/") + 1, this._tvsuUrl.length) + '.exe';
                tvsuDLInfo.DSName = "TVSU";
                tvsuDLInfo.Url = this._tvsuUrl;
                tvsuDLInfo.Version = this._tvsuVersion;
                sendInfoArray.push(tvsuDLInfo);
                postOper.RequestData = JSON.stringify(sendInfoArray);
                postOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallTVSUFailed;
                installTVSUOperations.push(postOper);
                var installTVSUOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'AdupNxtCmd', true, this._corsOperation, false);
                installTVSUOper.BranchVersion = branchVersion;
                installTVSUOper.SendFixedData = true;
                installTVSUOper.RequestData = 'AdupInstTvsu';
                installTVSUOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallTVSUFailed;
                installTVSUOperations.push(installTVSUOper);
                this._addDLOperationToInstallTVSU(installTVSUOperations, branchVersion);
                this._addTVSUInstallOperationToInstallTVSU(installTVSUOperations, branchVersion);
                this._addScanOperation(installTVSUOperations, LSBV4.Utility.EventTypeEnum.ADUPFailed, branchVersion);
                var installTVSUCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.InstallApp, installTVSUOperations, true);
                this.RegisterCommand(installTVSUCommand);
            };
            ADUPV4.prototype._addDLOperationToInstallTVSU = function (installTVSUOperations, branchVersion) {
                var _this = this;
                if (branchVersion === void 0) { branchVersion = 0; }
                var downloadTVSUStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'TvsuDlData', false, this._corsOperation);
                downloadTVSUStatusOper.BranchVersion = branchVersion;
                downloadTVSUStatusOper.RetryInPeroid = true;
                downloadTVSUStatusOper.SetLoopExecution(true, function (data) {
                    return Component.DLMInfrastructureLogic.ScanStatusLoopHandler(data);
                });
                downloadTVSUStatusOper.DataHandler = function (uniqueKey, data) {
                    return Component.DLMInfrastructureLogic.ScanStatusHandler(data, _this, uniqueKey);
                };
                downloadTVSUStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallTVSUFailed;
                installTVSUOperations.push(downloadTVSUStatusOper);
            };
            ADUPV4.prototype._addTVSUInstallOperationToInstallTVSU = function (installTVSUOperations, branchVersion) {
                var _this = this;
                if (branchVersion === void 0) { branchVersion = 0; }
                var installTVSUStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'TVSUInstallData', false, this._corsOperation);
                installTVSUStatusOper.BranchVersion = branchVersion;
                installTVSUStatusOper.RetryInPeroid = true;
                installTVSUStatusOper.SetLoopExecution(true, function (data) {
                    var status = data.InstallStatus;
                    return status !== InstallAPPStatusEnum.Installing;
                });
                installTVSUStatusOper.DataHandler = function (uniqueKey, data) {
                    var status = data.InstallStatus;
                    switch (status) {
                        case InstallAPPStatusEnum.Installing:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.InstallTVSUInstalling, uniqueKey, data);
                            return true;
                        case InstallAPPStatusEnum.Complete:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.InstallTVSUSuccess, uniqueKey, data);
                            return true;
                        case InstallAPPStatusEnum.Canceled:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.InstallTVSUCancelled, uniqueKey, data);
                            return false;
                        default:
                            return false;
                    }
                };
                installTVSUStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallTVSUFailed;
                installTVSUOperations.push(installTVSUStatusOper);
            };
            ADUPV4.prototype._initCancelInstallTVSUCommand = function () {
                var cancelScanOperations = [];
                var cancelScanLSBOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'AdupNxtCmd', true, this._corsOperation, false);
                cancelScanLSBOper.SendFixedData = true;
                cancelScanLSBOper.RequestData = 'AdupInstTvsuCancel';
                cancelScanLSBOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallTVSUCancelFailed;
                cancelScanOperations.push(cancelScanLSBOper);
                var cancelScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.InstallAppCancel, cancelScanOperations, false);
                this.RegisterCommand(cancelScanCommand);
            };
            ADUPV4.prototype._initCancelInstallTVSUCommandAtStart = function () {
                var _this = this;
                var cancelScanOperations = [];
                var cancelScanLSBOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'AdupNxtCmd', true, this._corsOperation, false);
                cancelScanLSBOper.SendFixedData = true;
                cancelScanLSBOper.RequestData = 'AdupInstTvsuCancelAtStart';
                cancelScanLSBOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DownloadTVSUCancelFailed;
                cancelScanOperations.push(cancelScanLSBOper);
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'AdupScanData', false, this._corsOperation);
                scanStatusOper.SetLoopExecution(true, function (data) {
                    var exception = data.Exception;
                    var process = data.Progress;
                    return (exception !== ADUPExceptionEnum.None && exception !== ADUPExceptionEnum.Waiting)
                        || (process === 100 || process < 0 || data.IsCanceled === true);
                });
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    if (_this._adup2CommonExceptionDataHander(data, uniqueKey) === true) {
                        if (data.IsCanceled === true) {
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadTVSUCancel, uniqueKey, data);
                        }
                        else {
                            switch (data.Exception) {
                                case ADUPExceptionEnum.None:
                                    if (data.Progress == null) {
                                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                                    }
                                    else {
                                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ADUPStatusSuccess, uniqueKey, data);
                                    }
                                    return true;
                                case ADUPExceptionEnum.Waiting:
                                    _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                                    return true;
                                default:
                                    break;
                            }
                        }
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                scanStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPFailed;
                cancelScanOperations.push(scanStatusOper);
                var cancelScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.DownloadAppCancel, cancelScanOperations, false);
                this.RegisterCommand(cancelScanCommand);
            };
            return ADUPV4;
        }(Component.AbstractComponent));
        Component.ADUPV4 = ADUPV4;
        var InstallAPPStatusEnum;
        (function (InstallAPPStatusEnum) {
            InstallAPPStatusEnum[InstallAPPStatusEnum["Installing"] = 0] = "Installing";
            InstallAPPStatusEnum[InstallAPPStatusEnum["Complete"] = 1] = "Complete";
            InstallAPPStatusEnum[InstallAPPStatusEnum["Canceled"] = 2] = "Canceled";
        })(InstallAPPStatusEnum = Component.InstallAPPStatusEnum || (Component.InstallAPPStatusEnum = {}));
        var ADUPExceptionEnum;
        (function (ADUPExceptionEnum) {
            ADUPExceptionEnum[ADUPExceptionEnum["None"] = 0] = "None";
            ADUPExceptionEnum[ADUPExceptionEnum["SystemNotSupport"] = 1] = "SystemNotSupport";
            ADUPExceptionEnum[ADUPExceptionEnum["NoTVSU"] = 2] = "NoTVSU";
            ADUPExceptionEnum[ADUPExceptionEnum["ErrorLaunchTVSU"] = 3] = "ErrorLaunchTVSU";
            ADUPExceptionEnum[ADUPExceptionEnum["ErrorDownloadTVSU"] = 4] = "ErrorDownloadTVSU";
            ADUPExceptionEnum[ADUPExceptionEnum["UnhandledException"] = 5] = "UnhandledException";
            ADUPExceptionEnum[ADUPExceptionEnum["WrongRequest"] = 6] = "WrongRequest";
            ADUPExceptionEnum[ADUPExceptionEnum["NotLenovo"] = 7] = "NotLenovo";
            ADUPExceptionEnum[ADUPExceptionEnum["LowVersion"] = 8] = "LowVersion";
            ADUPExceptionEnum[ADUPExceptionEnum["Waiting"] = 9] = "Waiting";
            ADUPExceptionEnum[ADUPExceptionEnum["TVSUUpdateFailed"] = 10] = "TVSUUpdateFailed";
            ADUPExceptionEnum[ADUPExceptionEnum["ErrorInstallTVSU"] = 11] = "ErrorInstallTVSU";
            ADUPExceptionEnum[ADUPExceptionEnum["CommunicationFailed"] = -1] = "CommunicationFailed";
            ADUPExceptionEnum[ADUPExceptionEnum["UserCancelled"] = -2] = "UserCancelled";
        })(ADUPExceptionEnum = Component.ADUPExceptionEnum || (Component.ADUPExceptionEnum = {}));
        var InstallPackageActionEnum;
        (function (InstallPackageActionEnum) {
            InstallPackageActionEnum[InstallPackageActionEnum["Downloading"] = 0] = "Downloading";
            InstallPackageActionEnum[InstallPackageActionEnum["Installing"] = 1] = "Installing";
            InstallPackageActionEnum[InstallPackageActionEnum["Done"] = 2] = "Done";
        })(InstallPackageActionEnum = Component.InstallPackageActionEnum || (Component.InstallPackageActionEnum = {}));
        var InstallPackageStatusEnum;
        (function (InstallPackageStatusEnum) {
            InstallPackageStatusEnum[InstallPackageStatusEnum["not_started"] = 0] = "not_started";
            InstallPackageStatusEnum[InstallPackageStatusEnum["downloading"] = 1] = "downloading";
            InstallPackageStatusEnum[InstallPackageStatusEnum["download_successful"] = 2] = "download_successful";
            InstallPackageStatusEnum[InstallPackageStatusEnum["download_fail"] = 3] = "download_fail";
            InstallPackageStatusEnum[InstallPackageStatusEnum["installing"] = 4] = "installing";
            InstallPackageStatusEnum[InstallPackageStatusEnum["install_successful"] = 5] = "install_successful";
            InstallPackageStatusEnum[InstallPackageStatusEnum["install_fail"] = 6] = "install_fail";
        })(InstallPackageStatusEnum = Component.InstallPackageStatusEnum || (Component.InstallPackageStatusEnum = {}));
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var DLMForHTTPPageV4 = (function (_super) {
            __extends(DLMForHTTPPageV4, _super);
            function DLMForHTTPPageV4(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._redirectOperation = LSBV4.Operation.RedirectOperation.GetSingleton();
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._initScanCommand();
                _this._initContinuousScanCommand();
                _this._initScanResumeCommand();
                _this._initContinuousScanResumeCommand();
                return _this;
            }
            DLMForHTTPPageV4.prototype._initScanCommand = function () {
                var scanOperations = [];
                var scanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'DlmDownload', true, this._corsOperation, true);
                scanOper.Timeout = 5000;
                scanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                scanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                scanOperations.push(scanOper);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.Scan, scanOperations, true);
                this.RegisterCommand(scanCommand);
            };
            DLMForHTTPPageV4.prototype._initContinuousScanCommand = function () {
                var continuousScanOperations = [];
                var continuousScanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'DlmDownload', true, this._corsOperation, true);
                continuousScanOper.Timeout = 5000;
                continuousScanOper.RetryInPeroid = true;
                continuousScanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                continuousScanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                continuousScanOperations.push(continuousScanOper);
                var continuousScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ContinuousScan, continuousScanOperations, true);
                this.RegisterCommand(continuousScanCommand);
            };
            DLMForHTTPPageV4.prototype._initScanResumeCommand = function () {
                var scanResumeOperations = [];
                var scanResumeOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'ResumeDlmDownload', false, this._corsOperation, true);
                scanResumeOper.Timeout = 5000;
                scanResumeOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                scanResumeOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                scanResumeOperations.push(scanResumeOper);
                var scanResumeCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanResume, scanResumeOperations, true);
                this.RegisterCommand(scanResumeCommand);
            };
            DLMForHTTPPageV4.prototype._initContinuousScanResumeCommand = function () {
                var continuousScanResumeOperations = [];
                var continuousScanResumeOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'ResumeDlmDownload', false, this._corsOperation, true);
                continuousScanResumeOper.Timeout = 5000;
                continuousScanResumeOper.RetryInPeroid = true;
                continuousScanResumeOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                continuousScanResumeOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                continuousScanResumeOperations.push(continuousScanResumeOper);
                var continuousScanResumeCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ContinuousScanResume, continuousScanResumeOperations, true);
                this.RegisterCommand(continuousScanResumeCommand);
            };
            return DLMForHTTPPageV4;
        }(Component.AbstractComponent));
        Component.DLMForHTTPPageV4 = DLMForHTTPPageV4;
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var DLMV1 = (function (_super) {
            __extends(DLMV1, _super);
            function DLMV1(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this.workOutDataStatus = function (data) {
                    if (data.Success === false) {
                        return Component.DownloadStatus.Error;
                    }
                    if (data.Data.length === 0) {
                        return Component.DownloadStatus.Canceled;
                    }
                    var status = Component.DownloadStatus.Downloading;
                    var completed = function (element) { return (element.status === Component.DownloadStatus.Completed || element.status === Component.DownloadStatus.Error); };
                    var completedFiltered = data.Data.filter(completed);
                    status = completedFiltered.length === data.Data.length ? Component.DownloadStatus.Completed : Component.DownloadStatus.Downloading;
                    if (status === Component.DownloadStatus.Downloading) {
                        var paused = function (element) { return element.status === Component.DownloadStatus.Paused; };
                        var pausedFiltered = data.Data.filter(paused);
                        status = pausedFiltered.length > 0 ? Component.DownloadStatus.Paused : Component.DownloadStatus.Downloading;
                    }
                    if (status === Component.DownloadStatus.Downloading) {
                        var canceled = function (element) { return element.status === Component.DownloadStatus.Canceled || element.status === Component.DownloadStatus.Canceling; };
                        var canceledFiltered = data.Data.filter(canceled);
                        status = canceledFiltered.length > 0 ? Component.DownloadStatus.Canceled : Component.DownloadStatus.Downloading;
                    }
                    return status;
                };
                _this._initScanStatusCommand();
                _this._initScanCancelCommand();
                _this._initScanPauseCommand();
                _this._initScanResumeCommand();
                _this._initCheckStatusCommand();
                _this._initGetStatusCommand();
                return _this;
            }
            DLMV1.prototype._initScanStatusCommand = function () {
                var _this = this;
                var scanStatusOperations = [];
                var callDownloadLocalHost = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'dlm/download', true, this._corsOperation, true);
                callDownloadLocalHost.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMFailed;
                scanStatusOperations.push(callDownloadLocalHost);
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'dlm/status', false, this._corsOperation, true);
                scanStatusOper.RetryInPeroid = true;
                scanStatusOper.SetLoopExecution(true, function (data) {
                    data.Status = _this.workOutDataStatus(data);
                    return Component.DLMInfrastructureLogic.ScanStatusLoopHandler(data);
                });
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    data.Status = _this.workOutDataStatus(data);
                    return Component.DLMInfrastructureLogic.ScanStatusHandler(data, _this, uniqueKey, scanStatusOper, 0);
                };
                scanStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMFailed;
                scanStatusOperations.push(scanStatusOper);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanStatus, scanStatusOperations, true);
                this.RegisterCommand(scanCommand);
            };
            DLMV1.prototype._initScanCancelCommand = function () {
                var cancelScanOperations = [];
                var cancelScanLSBOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'dlm/cancel', true, this._corsOperation, true);
                cancelScanLSBOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMCancelFailed;
                cancelScanOperations.push(cancelScanLSBOper);
                var cancelScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanCancel, cancelScanOperations, false);
                this.RegisterCommand(cancelScanCommand);
            };
            DLMV1.prototype._initScanPauseCommand = function () {
                var pauseScanOperations = [];
                var pauseScanLSBOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'dlm/pause', true, this._corsOperation, true);
                pauseScanLSBOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMPauseFailed;
                pauseScanOperations.push(pauseScanLSBOper);
                var pauseScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanPause, pauseScanOperations, false);
                this.RegisterCommand(pauseScanCommand);
            };
            DLMV1.prototype._initScanResumeCommand = function () {
                var _this = this;
                var scanResumeOperations = [];
                var callResumeLocalHost = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'dlm/resume', true, this._corsOperation, true);
                callResumeLocalHost.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMResumeFailed;
                scanResumeOperations.push(callResumeLocalHost);
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'dlm/status', false, this._corsOperation, true);
                scanStatusOper.RetryInPeroid = true;
                scanStatusOper.SetLoopExecution(true, function (data) {
                    data.Status = _this.workOutDataStatus(data);
                    return Component.DLMInfrastructureLogic.ScanStatusLoopHandler(data);
                });
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    data.Status = _this.workOutDataStatus(data);
                    return Component.DLMInfrastructureLogic.ScanStatusHandler(data, _this, uniqueKey, scanStatusOper, 1);
                };
                scanStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMFailed;
                scanResumeOperations.push(scanStatusOper);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanResume, scanResumeOperations, true);
                this.RegisterCommand(scanCommand);
            };
            DLMV1.prototype._initGetStatusCommand = function () {
                var _this = this;
                var scanStatusOperations = [];
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'dlm/download', false, this._corsOperation);
                scanStatusOper.SetLoopExecution(true, function (data) {
                    data.Status = _this.workOutDataStatus(data);
                    return Component.DLMInfrastructureLogic.ScanStatusLoopHandler(data);
                });
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    data.status = Component.DownloadStatus.Downloading;
                    return Component.DLMInfrastructureLogic.ScanStatusHandler(data, _this, uniqueKey, scanStatusOper, 1);
                };
                scanStatusOperations.push(scanStatusOper);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.Scan, scanStatusOperations, true);
                this.RegisterCommand(scanCommand);
            };
            DLMV1.prototype._initCheckStatusCommand = function () {
                var _this = this;
                var scanStatusOperations = [];
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'dlm/download', true, this._corsOperation, true);
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    var exception = data.Exception;
                    var status = _this.workOutDataStatus(data);
                    if (exception === Component.DLMExceptionEnum.None
                        && (status === Component.DownloadStatus.Waiting || status === Component.DownloadStatus.Downloading)) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DLMCheckStatusSuccess, uniqueKey, data);
                    }
                    return true;
                };
                scanStatusOper.RetryTimes = 0;
                scanStatusOperations.push(scanStatusOper);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.CheckStatus, scanStatusOperations, true);
                this.RegisterCommand(scanCommand);
            };
            return DLMV1;
        }(Component.AbstractComponent));
        Component.DLMV1 = DLMV1;
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var DLMV4 = (function (_super) {
            __extends(DLMV4, _super);
            function DLMV4(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._redirectOperation = LSBV4.Operation.RedirectOperation.GetSingleton();
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._initScanStatusCommand();
                _this._initScanCancelCommand();
                _this._initScanPauseCommand();
                _this._initScanResumeCommand();
                _this._initCheckStatusCommand();
                _this._initGetStatusCommand();
                return _this;
            }
            DLMV4.prototype._initScanStatusCommand = function () {
                var _this = this;
                var scanStatusOperations = [];
                var scanRedirectOper = new LSBV4.Operation.RedirectRequest(LSBV4.Operation.RedirectRequestActionEnum.DLMStart, this._redirectOperation, true);
                scanRedirectOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMFailed;
                scanStatusOperations.push(scanRedirectOper);
                var delScanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DlmNxtCmd', false, this._corsOperation);
                delScanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMFailed;
                scanStatusOperations.push(delScanOper);
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'DlmData', false, this._corsOperation);
                scanStatusOper.RetryInPeroid = true;
                scanStatusOper.SetLoopExecution(true, function (data) {
                    return DLMInfrastructureLogic.ScanStatusLoopHandler(data);
                });
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    return DLMInfrastructureLogic.ScanStatusHandler(data, _this, uniqueKey, scanStatusOper, 1);
                };
                scanStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMFailed;
                scanStatusOperations.push(scanStatusOper);
                var delScanOperWithNoEvent = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DlmData~DlmNxtCmd', false, this._corsOperation);
                delScanOperWithNoEvent.BranchVersion = 1;
                delScanOperWithNoEvent.RunWhenFailed = true;
                scanStatusOperations.push(delScanOperWithNoEvent);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanStatus, scanStatusOperations, true);
                this.RegisterCommand(scanCommand);
            };
            DLMV4.prototype._initScanCancelCommand = function () {
                var cancelScanOperations = [];
                var cancelScanLSBOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'DlmNxtCmd', true, this._corsOperation, false);
                cancelScanLSBOper.SendFixedData = true;
                cancelScanLSBOper.RequestData = 'CancelDlmDownload';
                cancelScanLSBOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMCancelFailed;
                cancelScanOperations.push(cancelScanLSBOper);
                var cancelScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanCancel, cancelScanOperations, false);
                this.RegisterCommand(cancelScanCommand);
            };
            DLMV4.prototype._initScanPauseCommand = function () {
                var pauseScanOperations = [];
                var cancelScanLSBOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'DlmNxtCmd', true, this._corsOperation, false);
                cancelScanLSBOper.SendFixedData = true;
                cancelScanLSBOper.RequestData = 'PauseDlmDownload';
                cancelScanLSBOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMPauseFailed;
                pauseScanOperations.push(cancelScanLSBOper);
                var cancelScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanPause, pauseScanOperations, false);
                this.RegisterCommand(cancelScanCommand);
            };
            DLMV4.prototype._initScanResumeCommand = function () {
                var _this = this;
                var scanResumeOperations = [];
                var scanRedirectOper = new LSBV4.Operation.RedirectRequest(LSBV4.Operation.RedirectRequestActionEnum.DLMResume, this._redirectOperation);
                scanRedirectOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMResumeFailed;
                scanResumeOperations.push(scanRedirectOper);
                var delOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DlmNxtCmd', true, this._corsOperation);
                delOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMResumeFailed;
                scanResumeOperations.push(delOper);
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'DlmData', false, this._corsOperation);
                scanStatusOper.RetryInPeroid = true;
                scanStatusOper.SetLoopExecution(true, function (data) {
                    return DLMInfrastructureLogic.ScanStatusLoopHandler(data);
                });
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    return DLMInfrastructureLogic.ScanStatusHandler(data, _this, uniqueKey, scanStatusOper, 1);
                };
                scanStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DLMFailed;
                scanResumeOperations.push(scanStatusOper);
                var delScanOperWithNoEvent = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DlmData~DlmNxtCmd', false, this._corsOperation);
                delScanOperWithNoEvent.BranchVersion = 1;
                delScanOperWithNoEvent.RunWhenFailed = true;
                scanResumeOperations.push(delScanOperWithNoEvent);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanResume, scanResumeOperations, true);
                this.RegisterCommand(scanCommand);
            };
            DLMV4.prototype._initGetStatusCommand = function () {
                var _this = this;
                var scanStatusOperations = [];
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'DlmData', false, this._corsOperation);
                scanStatusOper.SetLoopExecution(true, function (data) {
                    return DLMInfrastructureLogic.ScanStatusLoopHandler(data);
                });
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    return DLMInfrastructureLogic.ScanStatusHandler(data, _this, uniqueKey, scanStatusOper, 1);
                };
                scanStatusOperations.push(scanStatusOper);
                var delScanOperWithNoEvent = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DlmData~DlmNxtCmd', false, this._corsOperation);
                delScanOperWithNoEvent.BranchVersion = 1;
                delScanOperWithNoEvent.RunWhenFailed = true;
                scanStatusOperations.push(delScanOperWithNoEvent);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.Scan, scanStatusOperations, true);
                this.RegisterCommand(scanCommand);
            };
            DLMV4.prototype._initCheckStatusCommand = function () {
                var _this = this;
                var scanStatusOperations = [];
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'DlmData', false, this._corsOperation);
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    var exception = data.Exception;
                    var status = data.Status;
                    if (exception === DLMExceptionEnum.None
                        && (status === DownloadStatus.Waiting || status === DownloadStatus.Downloading)) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DLMCheckStatusSuccess, uniqueKey, data);
                    }
                    return true;
                };
                scanStatusOper.RetryTimes = 0;
                scanStatusOperations.push(scanStatusOper);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.CheckStatus, scanStatusOperations, true);
                this.RegisterCommand(scanCommand);
            };
            return DLMV4;
        }(Component.AbstractComponent));
        Component.DLMV4 = DLMV4;
        var DLMInfrastructureLogic = (function () {
            function DLMInfrastructureLogic() {
            }
            DLMInfrastructureLogic.DlmCommonExceptionDataHander = function (data, componentObj, uniqueKey) {
                switch (data.Exception) {
                    case DLMExceptionEnum.UserCancelSelectingLocation:
                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.UserCancelSelectingLocation, uniqueKey, data);
                        return false;
                    case DLMExceptionEnum.NotEnoughDiskSpace:
                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.NotEnoughDiskSpace, uniqueKey, data);
                        return false;
                    case DLMExceptionEnum.UnhandledException:
                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.UnhandledException, uniqueKey, data);
                        return false;
                    case DLMExceptionEnum.WrongRequest:
                        componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.WrongRequest, uniqueKey, data);
                        return false;
                    default:
                        return true;
                }
            };
            DLMInfrastructureLogic.ScanStatusHandler = function (data, componentObj, uniqueKey, request, nextBranchVersion) {
                if (this.DlmCommonExceptionDataHander(data, componentObj, uniqueKey) !== true) {
                    return false;
                }
                var status = data.Status;
                var callbackStr = (data.Callback == null) ? 'DLM' : data.Callback.trim();
                if (callbackStr === 'DLM') {
                    if (status != null) {
                        switch (status) {
                            case DownloadStatus.Downloading:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DLMStatusSuccess, uniqueKey, data);
                                break;
                            case DownloadStatus.Waiting:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                                break;
                            case DownloadStatus.Canceled:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DLMCancelSuccess, uniqueKey, data);
                                if (request != null && nextBranchVersion != null) {
                                    request.NextBranchVersion = nextBranchVersion;
                                }
                                return false;
                            case DownloadStatus.Completed:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DLMSuccess, uniqueKey, data);
                                if (request != null && nextBranchVersion != null) {
                                    request.NextBranchVersion = nextBranchVersion;
                                }
                                break;
                            case DownloadStatus.Paused:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DLMPauseSuccess, uniqueKey, data);
                                break;
                            case DownloadStatus.Error:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DLMError, uniqueKey, data);
                                if (request != null && nextBranchVersion != null) {
                                    request.NextBranchVersion = nextBranchVersion;
                                }
                                return false;
                            default:
                                break;
                        }
                    }
                }
                else if (callbackStr === 'ADUP') {
                    if (status != null) {
                        switch (status) {
                            case DownloadStatus.Downloading:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadTVSUStatus, uniqueKey, data);
                                break;
                            case DownloadStatus.Waiting:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                                break;
                            case DownloadStatus.Canceled:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadTVSUCancel, uniqueKey, data);
                                return false;
                            case DownloadStatus.Completed:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadTVSUStatus, uniqueKey, data);
                                break;
                            case DownloadStatus.Paused:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadTVSUPause, uniqueKey, data);
                                return false;
                            case DownloadStatus.Error:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadTVSUError, uniqueKey, data);
                                return false;
                            default:
                                break;
                        }
                    }
                }
                else if (callbackStr === "SysDiag") {
                    if (status != null) {
                        switch (status) {
                            case DownloadStatus.Downloading:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadLSCStatus, uniqueKey, data);
                                break;
                            case DownloadStatus.Waiting:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                                break;
                            case DownloadStatus.Canceled:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadLSCCancel, uniqueKey, data);
                                return false;
                            case DownloadStatus.Completed:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadLSCStatus, uniqueKey, data);
                                break;
                            case DownloadStatus.Paused:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadLSCPause, uniqueKey, data);
                                return false;
                            case DownloadStatus.Error:
                                componentObj.TriggerEvent(LSBV4.Utility.EventTypeEnum.DownloadLSCError, uniqueKey, data);
                                return false;
                            default:
                                break;
                        }
                    }
                }
                return true;
            };
            DLMInfrastructureLogic.ScanStatusLoopHandler = function (data) {
                var status = data.Status;
                var exception = data.Exception;
                var stopped = false;
                stopped = (exception != null && exception !== DLMExceptionEnum.None) || (status != null && (status === DownloadStatus.Canceled || status === DownloadStatus.Completed || status === DownloadStatus.Paused || status === DownloadStatus.Canceled));
                return stopped;
            };
            return DLMInfrastructureLogic;
        }());
        Component.DLMInfrastructureLogic = DLMInfrastructureLogic;
        var DownloadStatus;
        (function (DownloadStatus) {
            DownloadStatus[DownloadStatus["Initialized"] = 0] = "Initialized";
            DownloadStatus[DownloadStatus["Waiting"] = 1] = "Waiting";
            DownloadStatus[DownloadStatus["Downloading"] = 2] = "Downloading";
            DownloadStatus[DownloadStatus["Pausing"] = 3] = "Pausing";
            DownloadStatus[DownloadStatus["Paused"] = 4] = "Paused";
            DownloadStatus[DownloadStatus["Canceling"] = 5] = "Canceling";
            DownloadStatus[DownloadStatus["Canceled"] = 6] = "Canceled";
            DownloadStatus[DownloadStatus["Completed"] = 7] = "Completed";
            DownloadStatus[DownloadStatus["Error"] = 8] = "Error";
        })(DownloadStatus = Component.DownloadStatus || (Component.DownloadStatus = {}));
        var DLMExceptionEnum;
        (function (DLMExceptionEnum) {
            DLMExceptionEnum[DLMExceptionEnum["None"] = 0] = "None";
            DLMExceptionEnum[DLMExceptionEnum["UserCancelSelectingLocation"] = 1] = "UserCancelSelectingLocation";
            DLMExceptionEnum[DLMExceptionEnum["NotEnoughDiskSpace"] = 2] = "NotEnoughDiskSpace";
            DLMExceptionEnum[DLMExceptionEnum["UnhandledException"] = 3] = "UnhandledException";
            DLMExceptionEnum[DLMExceptionEnum["WrongRequest"] = 4] = "WrongRequest";
        })(DLMExceptionEnum = Component.DLMExceptionEnum || (Component.DLMExceptionEnum = {}));
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var DetectForHTTPPageV4 = (function (_super) {
            __extends(DetectForHTTPPageV4, _super);
            function DetectForHTTPPageV4(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._redirectOperation = LSBV4.Operation.RedirectOperation.GetSingleton();
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._initScanCommand();
                _this._initContinuousScanCommand();
                return _this;
            }
            DetectForHTTPPageV4.prototype._initScanCommand = function () {
                var scanOperations = [];
                var scanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'Detect', false, this._corsOperation, true);
                scanOper.Timeout = 5000;
                scanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                scanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                scanOperations.push(scanOper);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.Scan, scanOperations, true);
                this.RegisterCommand(scanCommand);
            };
            DetectForHTTPPageV4.prototype._initContinuousScanCommand = function () {
                var continuousScanOperations = [];
                var continuousScanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'Detect', false, this._corsOperation, true);
                continuousScanOper.Timeout = 5000;
                continuousScanOper.RetryInPeroid = true;
                continuousScanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                continuousScanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                continuousScanOperations.push(continuousScanOper);
                var continuousScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ContinuousScan, continuousScanOperations, true);
                this.RegisterCommand(continuousScanCommand);
            };
            return DetectForHTTPPageV4;
        }(Component.AbstractComponent));
        Component.DetectForHTTPPageV4 = DetectForHTTPPageV4;
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var DetectV1 = (function (_super) {
            __extends(DetectV1, _super);
            function DetectV1(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._initDetectCommand();
                return _this;
            }
            DetectV1.prototype._initDetectCommand = function () {
                var _this = this;
                var operations = [];
                var detectOp = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'machine_info', false, this._corsOperation, true);
                detectOp.DataHandler = function (uniqueKey, data) {
                    if (data.SN === "") {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NotLenovo, uniqueKey, data);
                        return false;
                    }
                    return true;
                };
                detectOp.SuccessEventType = LSBV4.Utility.EventTypeEnum.DetectSuccess;
                detectOp.FailedEventType = LSBV4.Utility.EventTypeEnum.DetectFailed;
                operations.push(detectOp);
                var detectCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.Scan, operations, true);
                this.RegisterCommand(detectCommand);
            };
            return DetectV1;
        }(Component.AbstractComponent));
        Component.DetectV1 = DetectV1;
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var DetectV4 = (function (_super) {
            __extends(DetectV4, _super);
            function DetectV4(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._redirectOperation = LSBV4.Operation.RedirectOperation.GetSingleton();
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._initScanStatusCommand();
                _this._initScanStatusCommandForVA();
                return _this;
            }
            DetectV4.prototype._initScanStatus = function (scanStatusOperations, forVA) {
                var _this = this;
                if (forVA === void 0) { forVA = false; }
                var scanRedirectOper = new LSBV4.Operation.RedirectRequest(LSBV4.Operation.RedirectRequestActionEnum.Detect, this._redirectOperation);
                scanRedirectOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DetectFailed;
                scanRedirectOper.ToNewWindow = forVA;
                scanStatusOperations.push(scanRedirectOper);
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'DetectData', false, this._corsOperation);
                scanStatusOper.RetryInPeroid = true;
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    if (data.Exception !== DetectExceptionEnum.None) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NotLenovo, uniqueKey, data);
                        return false;
                    }
                    return true;
                };
                scanStatusOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.DetectSuccess;
                scanStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DetectFailed;
                scanStatusOperations.push(scanStatusOper);
                var delScanOperWithNoEvent = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DetectData', false, this._corsOperation);
                delScanOperWithNoEvent.RunWhenFailed = true;
                scanStatusOperations.push(delScanOperWithNoEvent);
            };
            DetectV4.prototype._initScanStatusCommand = function () {
                var scanStatusOperations = [];
                this._initScanStatus(scanStatusOperations, false);
                var scanStatusCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanStatus, scanStatusOperations, true);
                this.RegisterCommand(scanStatusCommand);
            };
            DetectV4.prototype._initScanStatusCommandForVA = function () {
                var scanStatusOperations = [];
                this._initScanStatus(scanStatusOperations, true);
                var scanStatusCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanStatusForVA, scanStatusOperations, true);
                this.RegisterCommand(scanStatusCommand);
            };
            return DetectV4;
        }(Component.AbstractComponent));
        Component.DetectV4 = DetectV4;
        var DetectExceptionEnum;
        (function (DetectExceptionEnum) {
            DetectExceptionEnum[DetectExceptionEnum["None"] = 0] = "None";
            DetectExceptionEnum[DetectExceptionEnum["NotLenovo"] = 1] = "NotLenovo";
            DetectExceptionEnum[DetectExceptionEnum["CommunicationFailed"] = -1] = "CommunicationFailed";
            DetectExceptionEnum[DetectExceptionEnum["UserCancelled"] = -2] = "UserCancelled";
        })(DetectExceptionEnum = Component.DetectExceptionEnum || (Component.DetectExceptionEnum = {}));
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var LSBInstallV1 = (function (_super) {
            __extends(LSBInstallV1, _super);
            function LSBInstallV1(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._customOperation = LSBV4.Operation.CustomOperation.GetSingleton();
                _this._initPingCommand();
                _this._initContinuousPingCommand();
                _this._initUpdateLSBCommand();
                _this._initCancelLSBInstallCommand();
                return _this;
            }
            LSBInstallV1.prototype._initPingCommand = function () {
                var _this = this;
                var operations = [];
                var pingLsb = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'ping', false, this._corsOperation, true);
                pingLsb.DataHandler = function (uniqueKey, data) {
                    var lsbversion = data.version;
                    if (LSBV4.Utility.IsValidVersion(LSBV4.Utility.LSB_CLIENT_VERSION, lsbversion)) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.PingSuccess, uniqueKey, data);
                    }
                    else {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NeedUpdateLsb, uniqueKey, true);
                    }
                    return true;
                };
                pingLsb.Timeout = 1000;
                pingLsb.FailedEventType = LSBV4.Utility.EventTypeEnum.PingFailed;
                operations.push(pingLsb);
                var pingCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.CheckStatus, operations, true);
                this.RegisterCommand(pingCommand);
            };
            LSBInstallV1.prototype._initContinuousPingCommand = function () {
                var _this = this;
                var operations = [];
                var initOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    LSBInstallV1._isCancelled = false;
                    return true;
                }, this._customOperation);
                initOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPFailed;
                operations.push(initOper);
                var pingLsb = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'ping', false, this._corsOperation, true);
                pingLsb.Timeout = 1000;
                pingLsb.RetryInPeroid = true;
                pingLsb.CustomRetryStop = function () {
                    return LSBInstallV1._isCancelled === true;
                };
                pingLsb.DataHandler = function (uniqueKey, data) {
                    if (LSBInstallV1._isCancelled === false) {
                        var lsbversion = data.version;
                        if (LSBV4.Utility.IsValidVersion(LSBV4.Utility.LSB_CLIENT_VERSION, lsbversion)) {
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.PingSuccess, uniqueKey, data);
                        }
                        else {
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NeedUpdateLsb, uniqueKey, true);
                        }
                    }
                    return true;
                };
                pingLsb.FailedEventType = LSBV4.Utility.EventTypeEnum.PingFailed;
                operations.push(pingLsb);
                ;
                var pingCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ContinuousScan, operations, true);
                this.RegisterCommand(pingCommand);
            };
            LSBInstallV1.prototype._initUpdateLSBCommand = function () {
                var _this = this;
                var operations = [];
                var initOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    LSBInstallV1._isCancelled = false;
                    return true;
                }, this._customOperation);
                initOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPFailed;
                operations.push(initOper);
                var updateLsb = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'update', false, this._corsOperation, true);
                updateLsb.DataHandler = function (uniqueKey, data) {
                    var returnCode = parseInt(data.returnCode);
                    if (returnCode > 0) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.LSBUpdateFailed, uniqueKey, data);
                        return false;
                    }
                    return true;
                };
                updateLsb.Interval = 3000;
                operations.push(updateLsb);
                var pingLsb = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'ping', false, this._corsOperation, true);
                pingLsb.DataHandler = function (uniqueKey, data) {
                    var lsbversion = data.version;
                    if (LSBV4.Utility.IsValidVersion(LSBV4.Utility.LSB_CLIENT_VERSION, lsbversion)) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.LSBUpdateSuccess, uniqueKey, data);
                    }
                    else {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NeedUpdateLsb, uniqueKey, false);
                    }
                    return true;
                };
                pingLsb.CustomRetryStop = function () {
                    return LSBInstallV1._isCancelled === true;
                };
                pingLsb.Timeout = 1000;
                pingLsb.RetryInPeroid = true;
                pingLsb.Interval = 3000;
                pingLsb.FailedEventType = LSBV4.Utility.EventTypeEnum.PingFailed;
                operations.push(pingLsb);
                var cancelPingOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    return LSBInstallV1._isCancelled !== true;
                }, this._customOperation);
                operations.push(cancelPingOper);
                var pingCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.InstallApp, operations, true);
                this.RegisterCommand(pingCommand);
            };
            LSBInstallV1.prototype._initCancelLSBInstallCommand = function () {
                var cancelScanOperations = [];
                var cancelOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    LSBInstallV1._isCancelled = true;
                    return true;
                }, this._customOperation);
                cancelOper.FailedEventType = LSBV4.Utility.EventTypeEnum.ADUPCancelFailed;
                cancelScanOperations.push(cancelOper);
                var cancelScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.CancelWithOutCommunication, cancelScanOperations, false);
                this.RegisterCommand(cancelScanCommand);
            };
            LSBInstallV1._isCancelled = false;
            return LSBInstallV1;
        }(Component.AbstractComponent));
        Component.LSBInstallV1 = LSBInstallV1;
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var OSDiagForHTTPPageV4 = (function (_super) {
            __extends(OSDiagForHTTPPageV4, _super);
            function OSDiagForHTTPPageV4(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._redirectOperation = LSBV4.Operation.RedirectOperation.GetSingleton();
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._initScanCommand();
                _this._initContinuousScanCommand();
                _this._initRunCommand();
                _this._initContinuousRunCommand();
                _this._initRunByIdCommand();
                _this._initContinuousRunByIdCommand();
                return _this;
            }
            OSDiagForHTTPPageV4.prototype._initScanCommand = function () {
                var scanOperations = [];
                var scanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'OsDiagScan', false, this._corsOperation, true);
                scanOper.Timeout = 5000;
                scanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                scanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                scanOperations.push(scanOper);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.Scan, scanOperations, true);
                this.RegisterCommand(scanCommand);
            };
            OSDiagForHTTPPageV4.prototype._initContinuousScanCommand = function () {
                var continuousScanOperations = [];
                var continuousScanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'OsDiagScan', false, this._corsOperation, true);
                continuousScanOper.Timeout = 5000;
                continuousScanOper.RetryInPeroid = true;
                continuousScanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                continuousScanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                continuousScanOperations.push(continuousScanOper);
                var continuousScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ContinuousScan, continuousScanOperations, true);
                this.RegisterCommand(continuousScanCommand);
            };
            OSDiagForHTTPPageV4.prototype._initRunCommand = function () {
                var scanOperations = [];
                var scanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'OsDiag', true, this._corsOperation, true);
                scanOper.Timeout = 5000;
                scanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                scanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                scanOperations.push(scanOper);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.Run, scanOperations, true);
                this.RegisterCommand(scanCommand);
            };
            OSDiagForHTTPPageV4.prototype._initContinuousRunCommand = function () {
                var continuousScanOperations = [];
                var continuousScanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'OsDiag', true, this._corsOperation, true);
                continuousScanOper.Timeout = 5000;
                continuousScanOper.RetryInPeroid = true;
                continuousScanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                continuousScanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                continuousScanOperations.push(continuousScanOper);
                var continuousScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ContinuousRun, continuousScanOperations, true);
                this.RegisterCommand(continuousScanCommand);
            };
            OSDiagForHTTPPageV4.prototype._initRunByIdCommand = function () {
                var runOperations = [];
                var scanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'OsDiagRunById', true, this._corsOperation, true);
                scanOper.Timeout = 5000;
                scanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                scanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                runOperations.push(scanOper);
                var runCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.RunById, runOperations, true);
                this.RegisterCommand(runCommand);
            };
            OSDiagForHTTPPageV4.prototype._initContinuousRunByIdCommand = function () {
                var continuousRunByIdOperations = [];
                var continuousScanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'OsDiagRunById', true, this._corsOperation, true);
                continuousScanOper.Timeout = 5000;
                continuousScanOper.RetryInPeroid = true;
                continuousScanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                continuousScanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                continuousRunByIdOperations.push(continuousScanOper);
                var continuousRunByIdCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ContinuousRunById, continuousRunByIdOperations, true);
                this.RegisterCommand(continuousRunByIdCommand);
            };
            return OSDiagForHTTPPageV4;
        }(Component.AbstractComponent));
        Component.OSDiagForHTTPPageV4 = OSDiagForHTTPPageV4;
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var OSDiagV1 = (function (_super) {
            __extends(OSDiagV1, _super);
            function OSDiagV1(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._redirectOperation = LSBV4.Operation.RedirectOperation.GetSingleton();
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._customOperation = LSBV4.Operation.CustomOperation.GetSingleton();
                _this._initScanStatusCommand();
                _this._initRunCommand();
                _this._initRunByIdCommand();
                return _this;
            }
            OSDiagV1.prototype._initScanStatusCommand = function () {
                var _this = this;
                var scanStatusOperations = [];
                var initOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    OSDiagV1._isCancelled = false;
                    return true;
                }, this._customOperation);
                initOper.FailedEventType = LSBV4.Utility.EventTypeEnum.OSDiagScanFailed;
                scanStatusOperations.push(initOper);
                var cancelPingOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    return OSDiagV1._isCancelled !== true;
                }, this._customOperation);
                scanStatusOperations.push(cancelPingOper);
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'osdiag/scandiag', false, this._corsOperation, true);
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    if (data.Exception !== Component.DiagStatus.None) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.UnhandledException, uniqueKey, data);
                        return false;
                    }
                    return true;
                };
                scanStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.OSDiagScanFailed;
                scanStatusOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.OSDiagScanSuccess;
                scanStatusOperations.push(scanStatusOper);
                var scanStatusCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanStatus, scanStatusOperations, true);
                this.RegisterCommand(scanStatusCommand);
            };
            OSDiagV1.prototype._initRunCommand = function () {
                var _this = this;
                var runOperations = [];
                var initOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    OSDiagV1._isCancelled = false;
                    return true;
                }, this._customOperation);
                initOper.FailedEventType = LSBV4.Utility.EventTypeEnum.OSDiagRunFailed;
                runOperations.push(initOper);
                var cancelPingOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    return OSDiagV1._isCancelled !== true;
                }, this._customOperation);
                runOperations.push(cancelPingOper);
                var runStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'osdiag/link', true, this._corsOperation, true);
                runStatusOper.DataHandler = function (uniqueKey, data) {
                    data = JSON.parse(data);
                    if (data.Exception !== Component.DiagStatus.None) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.UnhandledException, uniqueKey, data);
                        return false;
                    }
                    return true;
                };
                runStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.OSDiagRunFailed;
                runStatusOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.OSDiagRunSuccess;
                runOperations.push(runStatusOper);
                var runCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.Run, runOperations, true);
                this.RegisterCommand(runCommand);
            };
            OSDiagV1.prototype._initRunByIdCommand = function () {
                var _this = this;
                var runByIdOperations = [];
                var initOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    OSDiagV1._isCancelled = false;
                    return true;
                }, this._customOperation);
                initOper.FailedEventType = LSBV4.Utility.EventTypeEnum.OSDiagRunFailed;
                runByIdOperations.push(initOper);
                var cancelPingOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    return OSDiagV1._isCancelled !== true;
                }, this._customOperation);
                runByIdOperations.push(cancelPingOper);
                var runStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'osdiag/runid', true, this._corsOperation, true);
                runStatusOper.DataHandler = function (uniqueKey, data) {
                    if (data.Exception !== Component.DiagStatus.None) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.UnhandledException, uniqueKey, data);
                        return false;
                    }
                    return true;
                };
                runStatusOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.OSDiagRunByIdSuccess;
                runStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.OSDiagRunByIdFailed;
                runByIdOperations.push(runStatusOper);
                var runByIdCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.RunById, runByIdOperations, true);
                this.RegisterCommand(runByIdCommand);
            };
            OSDiagV1._isCancelled = false;
            return OSDiagV1;
        }(Component.AbstractComponent));
        Component.OSDiagV1 = OSDiagV1;
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var OSDiagV4 = (function (_super) {
            __extends(OSDiagV4, _super);
            function OSDiagV4(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._redirectOperation = LSBV4.Operation.RedirectOperation.GetSingleton();
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._initScanStatusCommand();
                _this._initRunCommand();
                _this._initRunByIdCommand();
                return _this;
            }
            OSDiagV4.prototype._initScanStatusCommand = function () {
                var _this = this;
                var scanStatusOperations = [];
                var scanRedirectOper = new LSBV4.Operation.RedirectRequest(LSBV4.Operation.RedirectRequestActionEnum.OSDiagScan, this._redirectOperation);
                scanRedirectOper.FailedEventType = LSBV4.Utility.EventTypeEnum.OSDiagScanFailed;
                scanStatusOperations.push(scanRedirectOper);
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'OsDiagScanData', false, this._corsOperation);
                scanStatusOper.RetryInPeroid = true;
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    if (data.Exception !== DiagStatus.None) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.UnhandledException, uniqueKey, data);
                        return false;
                    }
                    return true;
                };
                scanStatusOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.OSDiagScanSuccess;
                scanStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.OSDiagScanFailed;
                scanStatusOperations.push(scanStatusOper);
                var delScanOperWithNoEvent = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'OsDiagScanData', false, this._corsOperation);
                delScanOperWithNoEvent.RunWhenFailed = true;
                scanStatusOperations.push(delScanOperWithNoEvent);
                var scanStatusCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanStatus, scanStatusOperations, true);
                this.RegisterCommand(scanStatusCommand);
            };
            OSDiagV4.prototype._initRunCommand = function () {
                var _this = this;
                var runOperations = [];
                var runRedirectOper = new LSBV4.Operation.RedirectRequest(LSBV4.Operation.RedirectRequestActionEnum.OSDiagRun, this._redirectOperation, true);
                runRedirectOper.FailedEventType = LSBV4.Utility.EventTypeEnum.OSDiagRunFailed;
                runOperations.push(runRedirectOper);
                var runStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'OsDiagData', false, this._corsOperation);
                runStatusOper.RetryInPeroid = true;
                runStatusOper.DataHandler = function (uniqueKey, data) {
                    if (data.Exception !== DiagStatus.None) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.UnhandledException, uniqueKey, data);
                        return false;
                    }
                    return true;
                };
                runStatusOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.OSDiagRunSuccess;
                runStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.OSDiagRunFailed;
                runOperations.push(runStatusOper);
                var delScanOperWithNoEvent = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'OsDiagData', false, this._corsOperation);
                delScanOperWithNoEvent.RunWhenFailed = true;
                runOperations.push(delScanOperWithNoEvent);
                var runCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.Run, runOperations, true);
                this.RegisterCommand(runCommand);
            };
            OSDiagV4.prototype._initRunByIdCommand = function () {
                var _this = this;
                var runByIdOperations = [];
                var runByIdRedirectOper = new LSBV4.Operation.RedirectRequest(LSBV4.Operation.RedirectRequestActionEnum.OSDiagRunById, this._redirectOperation, true);
                runByIdRedirectOper.FailedEventType = LSBV4.Utility.EventTypeEnum.OSDiagRunByIdFailed;
                runByIdOperations.push(runByIdRedirectOper);
                var runStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'OsDiagRunIdData', false, this._corsOperation);
                runStatusOper.RetryInPeroid = true;
                runStatusOper.DataHandler = function (uniqueKey, data) {
                    if (data.Exception !== DiagStatus.None) {
                        _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.UnhandledException, uniqueKey, data);
                        return false;
                    }
                    return true;
                };
                runStatusOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.OSDiagRunByIdSuccess;
                runStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.OSDiagRunByIdFailed;
                runByIdOperations.push(runStatusOper);
                var delScanOperWithNoEvent = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'OsDiagRunIdData', false, this._corsOperation);
                delScanOperWithNoEvent.RunWhenFailed = true;
                runByIdOperations.push(delScanOperWithNoEvent);
                var runByIdCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.RunById, runByIdOperations, true);
                this.RegisterCommand(runByIdCommand);
            };
            return OSDiagV4;
        }(Component.AbstractComponent));
        Component.OSDiagV4 = OSDiagV4;
        var DiagStatus;
        (function (DiagStatus) {
            DiagStatus[DiagStatus["None"] = 0] = "None";
        })(DiagStatus = Component.DiagStatus || (Component.DiagStatus = {}));
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var SysDiagForHTTPPageV4 = (function (_super) {
            __extends(SysDiagForHTTPPageV4, _super);
            function SysDiagForHTTPPageV4(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._redirectOperation = LSBV4.Operation.RedirectOperation.GetSingleton();
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._initScanCommand();
                _this._initContinuousScanCommand();
                _this._initRunByIdCommand();
                _this._initContinuousRunByIdCommand();
                return _this;
            }
            SysDiagForHTTPPageV4.prototype._initScanCommand = function () {
                var scanOperations = [];
                var scanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'SysDiag', false, this._corsOperation, true);
                scanOper.Timeout = 5000;
                scanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                scanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                scanOperations.push(scanOper);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.Scan, scanOperations, true);
                this.RegisterCommand(scanCommand);
            };
            SysDiagForHTTPPageV4.prototype._initContinuousScanCommand = function () {
                var continuousScanOperations = [];
                var continuousScanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'SysDiag', false, this._corsOperation, true);
                continuousScanOper.Timeout = 5000;
                continuousScanOper.RetryInPeroid = true;
                continuousScanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                continuousScanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                continuousScanOperations.push(continuousScanOper);
                var continuousScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ContinuousScan, continuousScanOperations, true);
                this.RegisterCommand(continuousScanCommand);
            };
            SysDiagForHTTPPageV4.prototype._initRunByIdCommand = function () {
                var scanOperations = [];
                var scanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'ModuleBasedDiag', true, this._corsOperation, true);
                scanOper.Timeout = 5000;
                scanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                scanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                scanOperations.push(scanOper);
                var scanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.RunById, scanOperations, true);
                this.RegisterCommand(scanCommand);
            };
            SysDiagForHTTPPageV4.prototype._initContinuousRunByIdCommand = function () {
                var continuousScanOperations = [];
                var continuousScanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'ModuleBasedDiag', true, this._corsOperation, true);
                continuousScanOper.Timeout = 5000;
                continuousScanOper.RetryInPeroid = true;
                continuousScanOper.SuccessEventType = LSBV4.Utility.EventTypeEnum.RedirectSuccess;
                continuousScanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.RedirectFailed;
                continuousScanOperations.push(continuousScanOper);
                var continuousScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ContinuousRunById, continuousScanOperations, true);
                this.RegisterCommand(continuousScanCommand);
            };
            return SysDiagForHTTPPageV4;
        }(Component.AbstractComponent));
        Component.SysDiagForHTTPPageV4 = SysDiagForHTTPPageV4;
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var SysDiagV1 = (function (_super) {
            __extends(SysDiagV1, _super);
            function SysDiagV1(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._redirectOperation = LSBV4.Operation.RedirectOperation.GetSingleton();
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._customOperation = LSBV4.Operation.CustomOperation.GetSingleton();
                _this._initModuleBasedDiagCommand();
                _this._initCancelScanCommand();
                return _this;
            }
            SysDiagV1.prototype._diagCommonExceptionDataHander = function (data, uniqueKey, request, nextBranchVersion) {
                switch (data.Exception) {
                    case Component.SysDiagExceptionEnum.SystemNotSupport:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.SystemNotSupport, uniqueKey, data);
                        return false;
                    case Component.SysDiagExceptionEnum.NoLSC:
                        if (request != null && nextBranchVersion != null) {
                            request.NextBranchVersion = nextBranchVersion;
                            return true;
                        }
                        return false;
                    case Component.SysDiagExceptionEnum.ErrorLaunchLSC:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ErrorLaunchLSC, uniqueKey, data);
                        return false;
                    case Component.SysDiagExceptionEnum.ErrorDownloadLSC:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ErrorDownloadLSC, uniqueKey, data);
                        return false;
                    case Component.SysDiagExceptionEnum.LSCNotLaunch:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.LSCNotLaunch, uniqueKey, data);
                        return false;
                    case Component.SysDiagExceptionEnum.UnhandledException:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.UnhandledException, uniqueKey, data);
                        return false;
                    case Component.SysDiagExceptionEnum.WrongRequest:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.WrongRequest, uniqueKey, data);
                        return false;
                    case Component.SysDiagExceptionEnum.NotLenovo:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NotLenovo, uniqueKey, data);
                        return false;
                    case Component.SysDiagExceptionEnum.NoWebAPIData:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NoWebAPIData, uniqueKey, data);
                        return false;
                    case Component.SysDiagExceptionEnum.WrongWebAPIData:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.WrongWebAPIData, uniqueKey, data);
                        return false;
                    case Component.SysDiagExceptionEnum.ModuleNotSupport:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ModuleNotSupport, uniqueKey, data);
                        return false;
                    default:
                        return true;
                }
            };
            SysDiagV1.prototype._initModuleBasedDiagCommand = function () {
                var _this = this;
                var operations = [];
                var initOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    SysDiagV1._isCancelled = false;
                    return true;
                }, this._customOperation);
                initOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagFailed;
                operations.push(initOper);
                var cancelPingOper = new LSBV4.Operation.CustomOperationRequest(function () {
                    return SysDiagV1._isCancelled !== true;
                }, this._customOperation);
                operations.push(cancelPingOper);
                var postOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'diag/runspecificdiags', true, this._corsOperation, true);
                postOper.Timeout = 5000;
                postOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagFailed;
                operations.push(postOper);
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'diag/getdiaglog', false, this._corsOperation, true);
                scanStatusOper.SetLoopExecution(true, function (data) {
                    var exception = data.Exception;
                    var process = data.OverallProgress;
                    return (exception !== Component.SysDiagExceptionEnum.None && exception !== Component.SysDiagExceptionEnum.Wait)
                        || (process === 100 || data.IsCanceled === true);
                });
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    switch (data.Exception) {
                        case Component.SysDiagExceptionEnum.None:
                            if (data.IsCanceled === true) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagCancelSuccess, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagStatusSuccess, uniqueKey, data);
                            }
                            return true;
                        case Component.SysDiagExceptionEnum.Wait:
                            if (data.IsCanceled === true) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagCancelSuccess, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                            }
                            return true;
                        default:
                            return _this._diagCommonExceptionDataHander(data, uniqueKey);
                    }
                };
                scanStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagFailed;
                operations.push(scanStatusOper);
                var moduleBasedDiagCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ContinuousRunById, operations, true);
                this.RegisterCommand(moduleBasedDiagCommand);
            };
            SysDiagV1.prototype._initCancelScanCommand = function () {
                var cancelScanOperations = [];
                var cancelScanLSBOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'diag/canceldiag', false, this._corsOperation, true);
                cancelScanLSBOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagCancelFailed;
                cancelScanOperations.push(cancelScanLSBOper);
                var cancelScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanCancel, cancelScanOperations, false);
                this.RegisterCommand(cancelScanCommand);
            };
            SysDiagV1._isCancelled = false;
            return SysDiagV1;
        }(Component.AbstractComponent));
        Component.SysDiagV1 = SysDiagV1;
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var Component;
    (function (Component) {
        var SysDiagV4 = (function (_super) {
            __extends(SysDiagV4, _super);
            function SysDiagV4(componentType) {
                var _this = _super.call(this, componentType) || this;
                _this._redirectOperation = LSBV4.Operation.RedirectOperation.GetSingleton();
                _this._corsOperation = LSBV4.Operation.CORSOperation.GetSingleton();
                _this._initModuleBasedDiagCommand();
                _this._initScanStatusCommand();
                _this._initCancelScanCommand();
                _this._initCancelInstallLSCCommand();
                return _this;
            }
            SysDiagV4.prototype._diagCommonExceptionDataHander = function (data, uniqueKey, request, nextBranchVersion) {
                switch (data.Exception) {
                    case SysDiagExceptionEnum.SystemNotSupport:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.SystemNotSupport, uniqueKey, data);
                        return false;
                    case SysDiagExceptionEnum.NoLSC:
                        if (request != null && nextBranchVersion != null) {
                            request.NextBranchVersion = nextBranchVersion;
                            return true;
                        }
                        return false;
                    case SysDiagExceptionEnum.ErrorLaunchLSC:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ErrorLaunchLSC, uniqueKey, data);
                        return false;
                    case SysDiagExceptionEnum.ErrorDownloadLSC:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ErrorDownloadLSC, uniqueKey, data);
                        return false;
                    case SysDiagExceptionEnum.LSCNotLaunch:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.LSCNotLaunch, uniqueKey, data);
                        return false;
                    case SysDiagExceptionEnum.UnhandledException:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.UnhandledException, uniqueKey, data);
                        return false;
                    case SysDiagExceptionEnum.WrongRequest:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.WrongRequest, uniqueKey, data);
                        return false;
                    case SysDiagExceptionEnum.NotLenovo:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NotLenovo, uniqueKey, data);
                        return false;
                    case SysDiagExceptionEnum.NoWebAPIData:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.NoWebAPIData, uniqueKey, data);
                        return false;
                    case SysDiagExceptionEnum.WrongWebAPIData:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.WrongWebAPIData, uniqueKey, data);
                        return false;
                    case SysDiagExceptionEnum.ModuleNotSupport:
                        this.TriggerEvent(LSBV4.Utility.EventTypeEnum.ModuleNotSupport, uniqueKey, data);
                        return false;
                    default:
                        return true;
                }
            };
            SysDiagV4.prototype._initModuleBasedDiagCommand = function () {
                var _this = this;
                var operations = [];
                var op3 = new LSBV4.Operation.RedirectRequest(LSBV4.Operation.RedirectRequestActionEnum.ModuleBasedDiagStart, this._redirectOperation, true);
                op3.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagFailed;
                operations.push(op3);
                var op1 = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DiagNxtCmd', false, this._corsOperation);
                op1.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagFailed;
                operations.push(op1);
                var op4 = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'DiagData', false, this._corsOperation);
                var op5 = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DiagData~DiagNxtCmd', false, this._corsOperation);
                op5.RunWhenFailed = true;
                op4.SetLoopExecution(true, function (data) {
                    var exception = data.Exception;
                    var process = data.OverallProgress;
                    return (exception !== SysDiagExceptionEnum.None && exception !== SysDiagExceptionEnum.Wait)
                        || (process === 100 || data.IsCanceled === true);
                });
                op4.DataHandler = function (uniqueKey, data) {
                    switch (data.Exception) {
                        case SysDiagExceptionEnum.None:
                            if (data.IsCanceled === true) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagCancelSuccess, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagStatusSuccess, uniqueKey, data);
                            }
                            return true;
                        case SysDiagExceptionEnum.Wait:
                            if (data.IsCanceled === true) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagCancelSuccess, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                            }
                            return true;
                        case SysDiagExceptionEnum.NoLSC:
                            op5.NextBranchVersion = 1;
                            return true;
                        default:
                            return _this._diagCommonExceptionDataHander(data, uniqueKey);
                    }
                };
                op4.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagFailed;
                operations.push(op4);
                operations.push(op5);
                var downloadLSCStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'DiagDlData', false, this._corsOperation);
                downloadLSCStatusOper.BranchVersion = 1;
                downloadLSCStatusOper.RetryInPeroid = true;
                downloadLSCStatusOper.SetLoopExecution(true, function (data) {
                    return Component.DLMInfrastructureLogic.ScanStatusLoopHandler(data);
                });
                downloadLSCStatusOper.DataHandler = function (uniqueKey, data) {
                    return Component.DLMInfrastructureLogic.ScanStatusHandler(data, _this, uniqueKey);
                };
                downloadLSCStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallLSCFailed;
                operations.push(downloadLSCStatusOper);
                var installLSCStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'LscInstallData', false, this._corsOperation);
                installLSCStatusOper.BranchVersion = 1;
                installLSCStatusOper.RetryInPeroid = true;
                installLSCStatusOper.SetLoopExecution(true, function (data) {
                    var status = data.InstallStatus;
                    return status !== Component.InstallAPPStatusEnum.Installing;
                });
                installLSCStatusOper.DataHandler = function (uniqueKey, data) {
                    var status = data.InstallStatus;
                    switch (status) {
                        case Component.InstallAPPStatusEnum.Installing:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.InstallLSCInstalling, uniqueKey, data);
                            return true;
                        case Component.InstallAPPStatusEnum.Complete:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.InstallLSCSuccess, uniqueKey, data);
                            return true;
                        case Component.InstallAPPStatusEnum.Canceled:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.InstallLSCCancelled, uniqueKey, data);
                            return false;
                        default:
                            return false;
                    }
                };
                installLSCStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallLSCFailed;
                operations.push(installLSCStatusOper);
                var op4v1 = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'DiagData', false, this._corsOperation);
                op4v1.BranchVersion = 1;
                op4v1.SetLoopExecution(true, function (data) {
                    var exception = data.Exception;
                    var process = data.OverallProgress;
                    return (exception !== SysDiagExceptionEnum.None && exception !== SysDiagExceptionEnum.Wait)
                        || (process === 100 || data.IsCanceled === true);
                });
                op4v1.DataHandler = function (uniqueKey, data) {
                    switch (data.Exception) {
                        case SysDiagExceptionEnum.None:
                            if (data.IsCanceled === true) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagCancelSuccess, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagStatusSuccess, uniqueKey, data);
                            }
                            return true;
                        case SysDiagExceptionEnum.Wait:
                            if (data.IsCanceled === true) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagCancelSuccess, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                            }
                            return true;
                        default:
                            return _this._diagCommonExceptionDataHander(data, uniqueKey);
                    }
                };
                op4v1.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagFailed;
                operations.push(op4v1);
                var op5v1 = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DiagData~DiagDlData~LscInstallData~DiagNxtCmd', false, this._corsOperation);
                op5v1.BranchVersion = 1;
                op5v1.RunWhenFailed = true;
                operations.push(op5v1);
                var moduleBasedDiagCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ContinuousRunById, operations, true);
                this.RegisterCommand(moduleBasedDiagCommand);
            };
            SysDiagV4.prototype._initScanStatusCommand = function () {
                var _this = this;
                var scanStatusOperations = [];
                var scanRedirectOper = new LSBV4.Operation.RedirectRequest(LSBV4.Operation.RedirectRequestActionEnum.SysDiagStart, this._redirectOperation);
                scanRedirectOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagFailed;
                scanStatusOperations.push(scanRedirectOper);
                var delScanOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DiagNxtCmd', false, this._corsOperation);
                delScanOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagFailed;
                scanStatusOperations.push(delScanOper);
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'DiagData', false, this._corsOperation);
                scanStatusOper.SetLoopExecution(true, function (data) {
                    var exception = data.Exception;
                    var process = data.OverallProgress;
                    return (exception !== SysDiagExceptionEnum.None && exception !== SysDiagExceptionEnum.Wait)
                        || (process === 100 || data.IsCanceled === true);
                });
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    switch (data.Exception) {
                        case SysDiagExceptionEnum.None:
                            if (data.IsCanceled === true) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagCancelSuccess, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagStatusSuccess, uniqueKey, data);
                            }
                            return true;
                        case SysDiagExceptionEnum.Wait:
                            if (data.IsCanceled === true) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagCancelSuccess, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                            }
                            return true;
                        default:
                            return _this._diagCommonExceptionDataHander(data, uniqueKey, scanStatusOper, 1);
                    }
                };
                scanStatusOper.Interval = 3000;
                scanStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagFailed;
                scanStatusOperations.push(scanStatusOper);
                var delScanOperWithNoEvent = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DiagData~DiagDlData~LscInstallData~DiagNxtCmd', false, this._corsOperation);
                delScanOperWithNoEvent.RunWhenFailed = true;
                scanStatusOperations.push(delScanOperWithNoEvent);
                var downloadLSCStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'DiagDlData', false, this._corsOperation);
                downloadLSCStatusOper.BranchVersion = 1;
                downloadLSCStatusOper.RetryInPeroid = true;
                downloadLSCStatusOper.SetLoopExecution(true, function (data) {
                    return Component.DLMInfrastructureLogic.ScanStatusLoopHandler(data);
                });
                downloadLSCStatusOper.DataHandler = function (uniqueKey, data) {
                    return Component.DLMInfrastructureLogic.ScanStatusHandler(data, _this, uniqueKey);
                };
                downloadLSCStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallLSCFailed;
                scanStatusOperations.push(downloadLSCStatusOper);
                var installLSCStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'LscInstallData', false, this._corsOperation);
                installLSCStatusOper.BranchVersion = 1;
                installLSCStatusOper.RetryInPeroid = true;
                installLSCStatusOper.SetLoopExecution(true, function (data) {
                    var status = data.InstallStatus;
                    return status !== Component.InstallAPPStatusEnum.Installing;
                });
                installLSCStatusOper.DataHandler = function (uniqueKey, data) {
                    var status = data.InstallStatus;
                    switch (status) {
                        case Component.InstallAPPStatusEnum.Installing:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.InstallLSCInstalling, uniqueKey, data);
                            return true;
                        case Component.InstallAPPStatusEnum.Complete:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.InstallLSCSuccess, uniqueKey, data);
                            return true;
                        case Component.InstallAPPStatusEnum.Canceled:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.InstallLSCCancelled, uniqueKey, data);
                            return false;
                        default:
                            return false;
                    }
                };
                installLSCStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallLSCFailed;
                scanStatusOperations.push(installLSCStatusOper);
                var scanStatusOperV1 = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'DiagData', false, this._corsOperation);
                scanStatusOperV1.BranchVersion = 1;
                scanStatusOperV1.SetLoopExecution(true, function (data) {
                    var exception = data.Exception;
                    var process = data.OverallProgress;
                    return (exception !== SysDiagExceptionEnum.None && exception !== SysDiagExceptionEnum.Wait)
                        || (process === 100 || data.IsCanceled === true);
                });
                scanStatusOperV1.DataHandler = function (uniqueKey, data) {
                    switch (data.Exception) {
                        case SysDiagExceptionEnum.None:
                            if (data.IsCanceled === true) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagCancelSuccess, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagStatusSuccess, uniqueKey, data);
                            }
                            return true;
                        case SysDiagExceptionEnum.Wait:
                            if (data.IsCanceled === true) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagCancelSuccess, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                            }
                            return true;
                        default:
                            return _this._diagCommonExceptionDataHander(data, uniqueKey);
                    }
                };
                scanStatusOperV1.Interval = 3000;
                scanStatusOperV1.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagFailed;
                scanStatusOperations.push(scanStatusOperV1);
                var delInstallLSCOperWithNoEvent = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DiagData~DiagDlData~LscInstallData~DiagNxtCmd', false, this._corsOperation);
                delInstallLSCOperWithNoEvent.BranchVersion = 1;
                delInstallLSCOperWithNoEvent.RunWhenFailed = true;
                scanStatusOperations.push(delInstallLSCOperWithNoEvent);
                var scanStatusCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanStatus, scanStatusOperations, true);
                this.RegisterCommand(scanStatusCommand);
            };
            SysDiagV4.prototype._initCancelScanCommand = function () {
                var cancelScanOperations = [];
                var cancelScanLSBOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'DiagNxtCmd', true, this._corsOperation, false);
                cancelScanLSBOper.SendFixedData = true;
                cancelScanLSBOper.RequestData = 'SysDiagCancel';
                cancelScanLSBOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagCancelFailed;
                cancelScanOperations.push(cancelScanLSBOper);
                var cancelScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.ScanCancel, cancelScanOperations, false);
                this.RegisterCommand(cancelScanCommand);
            };
            SysDiagV4.prototype._initInstallLSCCommand = function () {
                var _this = this;
                var installLSCOperations = [];
                var delInstallLSCOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DiagDlData~LscInstallData~DiagNxtCmd', false, this._corsOperation);
                delInstallLSCOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallLSCFailed;
                installLSCOperations.push(delInstallLSCOper);
                var installLscOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'DiagNxtCmd', true, this._corsOperation, false);
                installLscOper.SendFixedData = true;
                installLscOper.RequestData = 'SysDiagInstLsc';
                installLscOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallLSCFailed;
                installLSCOperations.push(installLscOper);
                var downloadLSCStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'DiagDlData', false, this._corsOperation);
                downloadLSCStatusOper.RetryInPeroid = true;
                downloadLSCStatusOper.SetLoopExecution(true, function (data) {
                    return Component.DLMInfrastructureLogic.ScanStatusLoopHandler(data);
                });
                downloadLSCStatusOper.DataHandler = function (uniqueKey, data) {
                    return Component.DLMInfrastructureLogic.ScanStatusHandler(data, _this, uniqueKey);
                };
                downloadLSCStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallLSCFailed;
                installLSCOperations.push(downloadLSCStatusOper);
                var installLSCStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'LscInstallData', false, this._corsOperation);
                installLSCStatusOper.RetryInPeroid = true;
                installLSCStatusOper.SetLoopExecution(true, function (data) {
                    var status = data.InstallStatus;
                    return status !== Component.InstallAPPStatusEnum.Installing;
                });
                installLSCStatusOper.DataHandler = function (uniqueKey, data) {
                    var status = data.InstallStatus;
                    switch (status) {
                        case Component.InstallAPPStatusEnum.Installing:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.InstallLSCInstalling, uniqueKey, data);
                            return true;
                        case Component.InstallAPPStatusEnum.Complete:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.InstallLSCSuccess, uniqueKey, data);
                            return true;
                        case Component.InstallAPPStatusEnum.Canceled:
                            _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.InstallLSCCancelled, uniqueKey, data);
                            return false;
                        default:
                            return false;
                    }
                };
                installLSCStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallLSCFailed;
                installLSCOperations.push(installLSCStatusOper);
                var scanStatusOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.GET, 'DiagData', false, this._corsOperation);
                scanStatusOper.SetLoopExecution(true, function (data) {
                    var exception = data.Exception;
                    var process = data.OverallProgress;
                    return (exception !== SysDiagExceptionEnum.None && exception !== SysDiagExceptionEnum.Wait)
                        || (process === 100 || data.IsCanceled === true);
                });
                scanStatusOper.DataHandler = function (uniqueKey, data) {
                    switch (data.Exception) {
                        case SysDiagExceptionEnum.None:
                            if (data.IsCanceled === true) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagCancelSuccess, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagStatusSuccess, uniqueKey, data);
                            }
                            return true;
                        case SysDiagExceptionEnum.Wait:
                            if (data.IsCanceled === true) {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.DiagCancelSuccess, uniqueKey, data);
                            }
                            else {
                                _this.TriggerEvent(LSBV4.Utility.EventTypeEnum.Waiting, uniqueKey, data);
                            }
                            return true;
                        default:
                            return _this._diagCommonExceptionDataHander(data, uniqueKey);
                    }
                };
                scanStatusOper.Interval = 3000;
                scanStatusOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DiagFailed;
                installLSCOperations.push(scanStatusOper);
                var delInstallLSCOperWithNoEvent = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.DELETE, 'DiagDlData~LscInstallData~DiagNxtCmd', false, this._corsOperation);
                delInstallLSCOperWithNoEvent.RunWhenFailed = true;
                installLSCOperations.push(delInstallLSCOperWithNoEvent);
                var installLSCCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.InstallApp, installLSCOperations, true);
                this.RegisterCommand(installLSCCommand);
            };
            SysDiagV4.prototype._initCancelInstallLSCCommand = function () {
                var cancelScanOperations = [];
                var cancelScanLSBOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'DiagNxtCmd', true, this._corsOperation, false);
                cancelScanLSBOper.SendFixedData = true;
                cancelScanLSBOper.RequestData = 'SysDiagInstLscCancel';
                cancelScanLSBOper.FailedEventType = LSBV4.Utility.EventTypeEnum.InstallLSCCancelFailed;
                cancelScanOperations.push(cancelScanLSBOper);
                var cancelScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.InstallAppCancel, cancelScanOperations, false);
                this.RegisterCommand(cancelScanCommand);
            };
            SysDiagV4.prototype._initCancelInstallLSCCommandAtStart = function () {
                var cancelScanOperations = [];
                var cancelScanLSBOper = new LSBV4.Operation.HTTPRequest(LSBV4.Operation.HTTPMethodEnum.POST, 'DiagNxtCmd', true, this._corsOperation, false);
                cancelScanLSBOper.SendFixedData = true;
                cancelScanLSBOper.RequestData = 'SysDiagInstLscCancelAtStart';
                cancelScanLSBOper.FailedEventType = LSBV4.Utility.EventTypeEnum.DownloadLSCCancelFailed;
                cancelScanOperations.push(cancelScanLSBOper);
                var cancelScanCommand = new LSBV4.Component.Command(LSBV4.Component.CommandTypeEnum.DownloadAppCancel, cancelScanOperations, false);
                this.RegisterCommand(cancelScanCommand);
            };
            return SysDiagV4;
        }(Component.AbstractComponent));
        Component.SysDiagV4 = SysDiagV4;
        var SysDiagExceptionEnum;
        (function (SysDiagExceptionEnum) {
            SysDiagExceptionEnum[SysDiagExceptionEnum["None"] = 0] = "None";
            SysDiagExceptionEnum[SysDiagExceptionEnum["SystemNotSupport"] = 1] = "SystemNotSupport";
            SysDiagExceptionEnum[SysDiagExceptionEnum["NoLSC"] = 2] = "NoLSC";
            SysDiagExceptionEnum[SysDiagExceptionEnum["ErrorLaunchLSC"] = 3] = "ErrorLaunchLSC";
            SysDiagExceptionEnum[SysDiagExceptionEnum["ErrorDownloadLSC"] = 4] = "ErrorDownloadLSC";
            SysDiagExceptionEnum[SysDiagExceptionEnum["LSCNotLaunch"] = 5] = "LSCNotLaunch";
            SysDiagExceptionEnum[SysDiagExceptionEnum["UnhandledException"] = 6] = "UnhandledException";
            SysDiagExceptionEnum[SysDiagExceptionEnum["WrongRequest"] = 7] = "WrongRequest";
            SysDiagExceptionEnum[SysDiagExceptionEnum["NotLenovo"] = 8] = "NotLenovo";
            SysDiagExceptionEnum[SysDiagExceptionEnum["Wait"] = 9] = "Wait";
            SysDiagExceptionEnum[SysDiagExceptionEnum["ModuleNotSupport"] = 10] = "ModuleNotSupport";
            SysDiagExceptionEnum[SysDiagExceptionEnum["NoWebAPIData"] = 11] = "NoWebAPIData";
            SysDiagExceptionEnum[SysDiagExceptionEnum["WrongWebAPIData"] = 12] = "WrongWebAPIData";
        })(SysDiagExceptionEnum = Component.SysDiagExceptionEnum || (Component.SysDiagExceptionEnum = {}));
    })(Component = LSBV4.Component || (LSBV4.Component = {}));
})(LSBV4 || (LSBV4 = {}));
var LSBV4;
(function (LSBV4) {
    var AbstractDispatcher = (function () {
        function AbstractDispatcher() {
        }
        AbstractDispatcher._initComponents = function () {
            this.RegisterIngoreUniqueKeyEvent(LSBV4.Utility.EventTypeEnum.RedirectSuccess);
            this.RegisterIngoreUniqueKeyEvent(LSBV4.Utility.EventTypeEnum.RedirectFailed);
            this._componentTypeMap[LSBV4.Component.ComponentTypeEnum.Detect] = LSBV4.Component.DetectV4;
            this._componentTypeMap[LSBV4.Component.ComponentTypeEnum.DetectForHTTPPage] = LSBV4.Component.DetectForHTTPPageV4;
            this._componentTypeMap[LSBV4.Component.ComponentTypeEnum.DLM] = LSBV4.Component.DLMV4;
            this._componentTypeMap[LSBV4.Component.ComponentTypeEnum.DLMForHTTPPage] = LSBV4.Component.DLMForHTTPPageV4;
            this._componentTypeMap[LSBV4.Component.ComponentTypeEnum.ADUP] = LSBV4.Component.ADUPV4;
            this._componentTypeMap[LSBV4.Component.ComponentTypeEnum.ADUPForHTTPPage] = LSBV4.Component.ADUPForHTTPPageV4;
            this._componentTypeMap[LSBV4.Component.ComponentTypeEnum.OSDiag] = LSBV4.Component.OSDiagV4;
            this._componentTypeMap[LSBV4.Component.ComponentTypeEnum.OSDiagForHTTPPage] = LSBV4.Component.OSDiagForHTTPPageV4;
            this._componentTypeMap[LSBV4.Component.ComponentTypeEnum.SysDiag] = LSBV4.Component.SysDiagV4;
            this._componentTypeMap[LSBV4.Component.ComponentTypeEnum.SysDiagForHTTPPage] = LSBV4.Component.SysDiagForHTTPPageV4;
        };
        AbstractDispatcher._initOperations = function () {
            LSBV4.Operation.HTTPRequest.AddLocalPort(50128);
            LSBV4.Operation.HTTPRequest.AddLocalPort(50129);
            LSBV4.Operation.HTTPRequest.AddLocalPort(50130);
        };
        AbstractDispatcher._initUtility = function () {
            LSBV4.Utility.ENABLE_LOG = true;
        };
        AbstractDispatcher._getComponent = function (componentType) {
            var selectedComponents = this._getComponentWithoutCreation(componentType);
            if (selectedComponents != null) {
                return selectedComponents;
            }
            else {
                var componentDefinition = this._componentTypeMap[componentType];
                if (componentDefinition == null) {
                    LSBV4.Utility.Log('Component of type ' + LSBV4.Component.ComponentTypeEnum[componentType] + ' is not mapped');
                    return null;
                }
                else {
                    var newComponent = new componentDefinition(componentType);
                    this._addNewComponent(newComponent);
                    selectedComponents = this._getComponentWithoutCreation(componentType);
                    if (selectedComponents != null) {
                        return selectedComponents;
                    }
                    else {
                        return null;
                    }
                }
            }
        };
        AbstractDispatcher._getComponentWithoutCreation = function (componentType) {
            var selectedComponents = this._components.filter(function (c) {
                return c.GetComponentType() === componentType;
            });
            if (selectedComponents != null && selectedComponents.length > 0) {
                return selectedComponents[0];
            }
            else {
                return null;
            }
        };
        AbstractDispatcher._addNewComponent = function (component) {
            if (component != null) {
                if (this._components.some(function (c) {
                    return c.GetComponentType() === component.GetComponentType();
                })) {
                    LSBV4.Utility.Log('Component of type ' + LSBV4.Component.ComponentTypeEnum[component.GetComponentType()] + ' has been existed');
                }
                else {
                    this._components.push(component);
                }
            }
            else {
                LSBV4.Utility.Log('Invalid component');
            }
        };
        AbstractDispatcher.Init = function () {
            LSBV4.Operation.RedirectOperation.InitWindowMessageLisenter();
        };
        AbstractDispatcher.InitConfig = function () {
            this._initUtility();
            this._initOperations();
            this._initComponents();
        };
        AbstractDispatcher.AddEventListener = function (eventType, eventHandler, uniqueKey) {
            var newEvent = new LSBV4.Utility.EventHandler();
            newEvent.EventType = eventType;
            newEvent.EventHandler = eventHandler;
            newEvent.uniqueKey = uniqueKey;
            LSBV4.Utility.AddEventListener(newEvent);
        };
        AbstractDispatcher.BatchAddEventListener = function (eventHandler, uniqueKey, eventType) {
            if (eventType != null && eventType.length > 0) {
                eventType.forEach(function (et) {
                    var newEvent = new LSBV4.Utility.EventHandler();
                    newEvent.EventType = et;
                    newEvent.EventHandler = eventHandler;
                    newEvent.uniqueKey = uniqueKey;
                    LSBV4.Utility.AddEventListener(newEvent);
                });
            }
        };
        AbstractDispatcher.RemoveEventListener = function (eventType, uniqueKey) {
            LSBV4.Utility.RemoveEventListener(eventType, uniqueKey);
        };
        AbstractDispatcher.ExecCommand = function (componentType, commandType, uniqueKey, data) {
            var component = this._getComponent(componentType);
            if (component != null) {
                component.ExecCommand(commandType, uniqueKey, data);
            }
            else {
                LSBV4.Utility.Log('Component "' + LSBV4.Component.ComponentTypeEnum[componentType] + '" is not existed');
            }
        };
        AbstractDispatcher.RegisterIngoreUniqueKeyEvent = function (event) {
            LSBV4.Component.AbstractComponent.RegisterIgnoreUniqueKeyEvent(event);
        };
        AbstractDispatcher._components = [];
        AbstractDispatcher._componentTypeMap = {};
        return AbstractDispatcher;
    }());
    LSBV4.AbstractDispatcher = AbstractDispatcher;
    var Dispatcher = (function (_super) {
        __extends(Dispatcher, _super);
        function Dispatcher() {
            var _this = _super.call(this) || this;
            _this.UniqueId = '';
            _this.UniqueId = new Date().getTime().toString();
            return _this;
        }
        Dispatcher.prototype.AddEventListener = function (eventType, eventHandler) {
            Dispatcher.AddEventListener(eventType, eventHandler, this.UniqueId);
        };
        Dispatcher.prototype.BatchAddEventListener = function (eventHandler) {
            var eventType = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                eventType[_i - 1] = arguments[_i];
            }
            Dispatcher.BatchAddEventListener(eventHandler, this.UniqueId, eventType);
        };
        Dispatcher.prototype.RemoveEventListener = function (eventType) {
            Dispatcher.RemoveEventListener(eventType, this.UniqueId);
        };
        Dispatcher.prototype.ExecCommand = function (componentType, commandType, data) {
            Dispatcher.ExecCommand(componentType, commandType, this.UniqueId, data);
        };
        Dispatcher.GetDispatcher = function () {
            return new Dispatcher();
        };
        return Dispatcher;
    }(AbstractDispatcher));
    LSBV4.Dispatcher = Dispatcher;
})(LSBV4 || (LSBV4 = {}));
LSBV4.Dispatcher.InitConfig();
(function () {
    LSBV4.Dispatcher.Init();
})();
var LSBV4;
(function (LSBV4) {
    var ConvenientComponent = (function () {
        function ConvenientComponent() {
        }
        ConvenientComponent.GetLSBDetect = function (successCallback, failedCallback, isForVA) {
            if (isForVA === void 0) { isForVA = false; }
            var newObj = new LSBV4.ConvenientComponent.LSBDetect();
            newObj.ISForVA = isForVA;
            if (successCallback != null) {
                newObj._successCallback = successCallback;
            }
            if (failedCallback != null) {
                newObj._failedCallback = failedCallback;
            }
            return newObj;
        };
        return ConvenientComponent;
    }());
    LSBV4.ConvenientComponent = ConvenientComponent;
})(LSBV4 || (LSBV4 = {}));
(function (LSBV4) {
    var ConvenientComponent;
    (function (ConvenientComponent) {
        var LSBDetectCallbackData = (function () {
            function LSBDetectCallbackData() {
            }
            return LSBDetectCallbackData;
        }());
        ConvenientComponent.LSBDetectCallbackData = LSBDetectCallbackData;
        var LSBDetect = (function () {
            function LSBDetect() {
                this.ISForVA = false;
                this._dispatcher = LSBV4.Dispatcher.GetDispatcher();
                this._initEventHandler();
            }
            LSBDetect.prototype._initEventHandler = function () {
                var _this = this;
                this._dispatcher.BatchAddEventListener(function (data) {
                    _this.EventHandler(0, data);
                }, LSBV4.Utility.EventTypeEnum.DetectSuccess, LSBV4.Utility.EventTypeEnum.NotLenovo);
                this._dispatcher.BatchAddEventListener(function () {
                    _this.EventHandler(LSBV4.Component.DetectExceptionEnum.CommunicationFailed);
                }, LSBV4.Utility.EventTypeEnum.DetectFailed);
                this._dispatcher.BatchAddEventListener(function () {
                    _this.EventHandler(LSBV4.Component.DetectExceptionEnum.UserCancelled);
                }, LSBV4.Utility.EventTypeEnum.UserCancelled);
            };
            ;
            LSBDetect.prototype.EventHandler = function (exception, data) {
                exception = exception == null ? LSBV4.Component.DetectExceptionEnum.CommunicationFailed : exception;
                var returnData = new LSBDetectCallbackData();
                switch (exception) {
                    case LSBV4.Component.DetectExceptionEnum.None:
                        if (this._successCallback != null) {
                            if (data != null && !$.isEmptyObject(data)) {
                                if (data.Mtm != null) {
                                    LSBV4.Utility.SetCookie("MTM", data.Mtm);
                                    returnData.MTM = data.Mtm;
                                }
                                if (data.Sn != null) {
                                    LSBV4.Utility.SetCookie("SN", data.Sn);
                                    LSBV4.Utility.SetCookie("ContactUsSN", data.Sn);
                                    LSBV4.Utility.SetCookie("ContactUsMTM", data.Mtm);
                                    returnData.SN = data.Sn;
                                }
                                if (data.Os != null) {
                                    LSBV4.Utility.SetCookie("OS", data.Os);
                                }
                            }
                            this._successCallback(returnData);
                        }
                        break;
                    case LSBV4.Component.DetectExceptionEnum.UserCancelled:
                        if (this._failedCallback != null) {
                            this._failedCallback(true);
                        }
                        break;
                    default:
                        if (this._failedCallback != null) {
                            this._failedCallback(false);
                        }
                        break;
                }
            };
            ;
            LSBDetect.prototype.Start = function () {
                var mtm = Cookies.get('MTM');
                var sn = Cookies.get('SN');
                if (mtm != null && mtm !== "") {
                    var returnData = new LSBDetectCallbackData();
                    returnData.MTM = mtm;
                    returnData.SN = sn;
                    this._successCallback(returnData);
                }
                else {
                    this._dispatcher.ExecCommand(LSBV4.Component.ComponentTypeEnum.Detect, this.ISForVA === false ? LSBV4.Component.CommandTypeEnum.ScanStatus : LSBV4.Component.CommandTypeEnum.ScanStatusForVA);
                }
            };
            return LSBDetect;
        }());
        ConvenientComponent.LSBDetect = LSBDetect;
    })(ConvenientComponent = LSBV4.ConvenientComponent || (LSBV4.ConvenientComponent = {}));
})(LSBV4 || (LSBV4 = {}));
(function (LSBV4) {
    var Detect;
    (function (Detect) {
        var LSBDetectCallbackData = (function () {
            function LSBDetectCallbackData() {
            }
            return LSBDetectCallbackData;
        }());
        Detect.LSBDetectCallbackData = LSBDetectCallbackData;
        var LSBDetect = (function () {
            function LSBDetect(dispatcher, successCallback, failCallback, lsbInstallContainerStr) {
                this._dispatcher = LSBV4.Dispatcher.GetDispatcher();
                this._successCallback = successCallback;
                this._failedCallback = failCallback;
                this._lsbInstallContainerStr = lsbInstallContainerStr;
                this._initEventHandler();
            }
            LSBDetect.prototype._initEventHandler = function () {
                var _this = this;
                this._dispatcher.BatchAddEventListener(function (data) {
                    LSBV4.Utility.Log('LSB install or update success');
                    _this._dispatcher.ExecCommand(LSBV4.Component.ComponentTypeEnum.Detect, _this._dispatcher.LastCommandType);
                    l.DTM.push({
                        type: "eSupportProcess_Complete",
                        name: "LSB:Success Machine Detection-" + _this._dispatcher.LastCommandType,
                        action: "Button Click",
                        errorInfo: {
                            message: "Detect Success:" + _this._dispatcher.LastCommandType
                        }
                    });
                }, LSBV4.Utility.EventTypeEnum.PingSuccess, LSBV4.Utility.EventTypeEnum.LSBUpdateSuccess);
                this._dispatcher.BatchAddEventListener(function (data) {
                    _this.EventHandler(0, data);
                }, LSBV4.Utility.EventTypeEnum.DetectSuccess, LSBV4.Utility.EventTypeEnum.NotLenovo);
                this._dispatcher.BatchAddEventListener(function () {
                    _this.EventHandler(LSBV4.Component.DetectExceptionEnum.CommunicationFailed);
                }, LSBV4.Utility.EventTypeEnum.DetectFailed);
                this._dispatcher.BatchAddEventListener(function () {
                    _this.EventHandler(LSBV4.Component.DetectExceptionEnum.UserCancelled);
                    l.DTM.Lmd.pusherrorinfTrack('LSB Install Cancel', 'Install User Cancel');
                }, LSBV4.Utility.EventTypeEnum.UserCancelled);
            };
            ;
            LSBDetect.prototype.EventHandler = function (exception, data) {
                exception = exception == null ? LSBV4.Component.DetectExceptionEnum.CommunicationFailed : exception;
                var returnData = new LSBDetectCallbackData();
                switch (exception) {
                    case LSBV4.Component.DetectExceptionEnum.None:
                        if (this._successCallback != null) {
                            if (data != null && !$.isEmptyObject(data)) {
                                if (data.Mtm != null) {
                                    LSBV4.Utility.SetCookie("MTM", data.Mtm);
                                    Cookies.set("ContactUsMTM", data.Mtm, { path: '/' });
                                    returnData.MTM = data.Mtm;
                                }
                                if (data.Sn != null) {
                                    LSBV4.Utility.SetCookie("SN", data.Sn);
                                    Cookies.set("ContactUsSN", data.Sn, { path: '/' });
                                    returnData.SN = data.Sn;
                                }
                                if (data.Os != null) {
                                    LSBV4.Utility.SetCookie("OS", data.Os);
                                }
                            }
                            this._successCallback(returnData);
                        }
                        break;
                    case LSBV4.Component.DetectExceptionEnum.UserCancelled:
                        if (this._failedCallback != null) {
                            this._failedCallback(true);
                        }
                        break;
                    default:
                        if (this._failedCallback != null) {
                            this._failedCallback(false);
                        }
                        break;
                }
            };
            ;
            LSBDetect.prototype.Start = function () {
                var mtm = Cookies.get('MTM');
                var sn = Cookies.get('SN');
                if (mtm != null && mtm !== "") {
                    var returnData = new LSBDetectCallbackData();
                    returnData.MTM = mtm;
                    returnData.SN = sn;
                    this._successCallback(returnData);
                }
                else {
                    this._dispatcher.ExecCommand(LSBV4.Component.ComponentTypeEnum.Detect, LSBV4.Component.CommandTypeEnum.ScanStatus);
                }
            };
            return LSBDetect;
        }());
        Detect.LSBDetect = LSBDetect;
        var _lsbDetect;
        Detect.init = function (successCallback, failCallback, lsbInstallContainerStr) {
            _lsbDetect = new LSBDetect(LSBV4.Dispatcher.GetDispatcher(), successCallback, failCallback, lsbInstallContainerStr);
            return _lsbDetect;
        };
    })(Detect = LSBV4.Detect || (LSBV4.Detect = {}));
})(LSBV4 || (LSBV4 = {}));
