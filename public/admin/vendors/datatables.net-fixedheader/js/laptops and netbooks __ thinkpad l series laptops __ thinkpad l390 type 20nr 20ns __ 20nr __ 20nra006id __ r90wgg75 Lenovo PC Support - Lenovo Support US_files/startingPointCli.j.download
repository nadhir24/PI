let serviceOption = {};
(function (serviceOption) {
    //For IE
    if (!String.prototype.includes) {
        Object.defineProperty(String.prototype, 'includes', {
            configurable: true,
            writable: true,
            enumerable: false,
            value: function includes (search, start) {
                'use strict';
                if (typeof start !== 'number') {
                    start = 0;
                }

                if (start + search.length > this.length) {
                    return false;
                } else {
                    return this.indexOf(search, start) !== -1;
                }
            }
        });
    }

    if (!Array.prototype.includes) {
        Object.defineProperty(Array.prototype, 'includes', {
            configurable: true,
            writable: true,
            enumerable: false,
            value: function includes (valueToFind, fromIndex) {
                if (this == null) {
                    throw new TypeError('"this" is null or not defined');
                }

                // 1. Let O be ? ToObject(this value).
                var o = Object(this);

                // 2. Let len be ? ToLength(? Get(O, "length")).
                var len = o.length >>> 0;

                // 3. If len is 0, return false.
                if (len === 0) {
                    return false;
                }

                // 4. Let n be ? ToInteger(fromIndex).
                //    (If fromIndex is undefined, this step produces the value 0.)
                var n = fromIndex | 0;

                // 5. If n ≥ 0, then
                //  a. Let k be n.
                // 6. Else n < 0,
                //  a. Let k be len + n.
                //  b. If k < 0, let k be 0.
                var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

                function sameValueZero (x, y) {
                    return x === y ||
                      (typeof x === 'number' && typeof y === 'number' &&
                        isNaN(x) && isNaN(y));
                }

                // 7. Repeat, while k < len
                while (k < len) {
                    // a. Let elementK be the result of ? Get(O, ! ToString(k)).
                    // b. If SameValueZero(valueToFind, elementK) is true, return true.
                    if (sameValueZero(o[k], valueToFind)) {
                        return true;
                    }
                    // c. Increase k by 1.
                    k++;
                }

                // 8. Return false
                return false;
            }
        });
    }

    if (!Array.from) {
        Object.defineProperty(Array, 'from', {
            configurable: true,
            writable: true,
            enumerable: false,
            value: (function () {
                var toStr = Object.prototype.toString;
                var isCallable = function (fn) {
                    return typeof fn === 'function' || toStr.call(fn) ===
                      '[object Function]';
                };
                var toInteger = function (value) {
                    var number = Number(value);
                    if (isNaN(number)) { return 0; }
                    if (number === 0 || !isFinite(number)) { return number; }
                    return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
                };
                var maxSafeInteger = Math.pow(2, 53) - 1;
                var toLength = function (value) {
                    var len = toInteger(value);
                    return Math.min(Math.max(len, 0), maxSafeInteger);
                };

                // The length property of the from method is 1.
                return function from (arrayLike/*, mapFn, thisArg */) {
                    // 1. Let C be the this value.
                    var C = this;

                    // 2. Let items be ToObject(arrayLike).
                    var items = Object(arrayLike);

                    // 3. ReturnIfAbrupt(items).
                    if (arrayLike == null) {
                        throw new TypeError(
                          'Array.from requires an array-like object - not null or undefined');
                    }

                    // 4. If mapfn is undefined, then let mapping be false.
                    var mapFn = arguments.length > 1
                      ? arguments[1]
                      : void undefined;
                    var T;
                    if (typeof mapFn !== 'undefined') {
                        // 5. else
                        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
                        if (!isCallable(mapFn)) {
                            throw new TypeError(
                              'Array.from: when provided, the second argument must be a function');
                        }

                        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
                        if (arguments.length > 2) {
                            T = arguments[2];
                        }
                    }

                    // 10. Let lenValue be Get(items, "length").
                    // 11. Let len be ToLength(lenValue).
                    var len = toLength(items.length);

                    // 13. If IsConstructor(C) is true, then
                    // 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.
                    // 14. a. Else, Let A be ArrayCreate(len).
                    var A = isCallable(C) ? Object(new C(len)) : new Array(len);

                    // 16. Let k be 0.
                    var k = 0;
                    // 17. Repeat, while k < len… (also steps a - h)
                    var kValue;
                    while (k < len) {
                        kValue = items[k];
                        if (mapFn) {
                            A[k] = typeof T === 'undefined'
                              ? mapFn(kValue, k)
                              : mapFn.call(T, kValue, k);
                        } else {
                            A[k] = kValue;
                        }
                        k += 1;
                    }
                    // 18. Let putStatus be Put(A, "length", len, true).
                    A.length = len;
                    // 20. Return A.
                    return A;
                };
            }())
        });
    }

    serviceOption.filterAddon = function (orgResponseData, pn) {
        let result = { needDisplayed: [], canBeSelected: [], locked: [], selected: [], selectedWarranty: null };

        //only sort once
        if (this.addonOrderInit === undefined && orgResponseData.addons != undefined && orgResponseData.addons && orgResponseData.addons.length > 1) {
            //set ISE as "ZZZ" then when sorting, it will be put in tail
            orgResponseData.addons.map(function (m) {
                if (m.warrantyCode == "ISE") {
                    m.sortCode = "ZZZ"
                } else {
                    m.sortCode = m.warrantyCode
                }
            });
            //sort to make the UI consistent
            orgResponseData.addons.sort(function (a, b) {
                if (a.sortCode < b.sortCode) {
                    return -1;
                }
                if (a.sortCode > b.sortCode) {
                    return 1;
                }
                return 0;
            });
            this.addonOrderInit = true;
        }

        //Deep copy object
        let responseData = JSON.parse(JSON.stringify(orgResponseData));

        if (responseData && responseData.addons) {
            if (!pn || pn == "BASE") {
                result = _getAddonForCurrentWarranty(responseData);
                delete window["lastSelectedAddons"];
                delete window["lastSelectedWarrantyPn"];
            }
            else {
                let isWarranty = responseData.warranties.filter(function (warranty) { return warranty.partNumber == pn }).length > 0;
                if (isWarranty) {
                    //Double selected
                    if (window["lastSelectedWarrantyPn"] == pn) {
                        delete window["lastSelectedWarrantyPn"];
                        result = _getAddonForCurrentWarranty(responseData);
                    }
                    else {
                        window["lastSelectedWarrantyPn"] = pn;
                        result = _getAddonForSpecificWarranty(responseData, pn);
                    }

                    if (result.locked && result.locked.length > 0)
                        window["lastSelectedAddons"] = result.locked.map(function (locaked) { return locaked.partNumber });
                    else
                        delete window["lastSelectedAddons"];
                }
                else {
                    result = window["lastSelectedWarrantyPn"] ? _getAddonForSpecificWarranty(responseData, window["lastSelectedWarrantyPn"]) : _getAddonForCurrentWarranty(responseData);
                    //Double selected
                    if (window["lastSelectedAddons"] && window["lastSelectedAddons"].includes(pn))
                        window["lastSelectedAddons"] = window["lastSelectedAddons"].filter(function (selectedAddon) { return selectedAddon != pn });
                    else {
                        if (window["lastSelectedAddons"] == null)
                            window["lastSelectedAddons"] = [];
                        window["lastSelectedAddons"].push(pn);
                    }

                    /****************************
                     * qiaotan01 2020.06.17  EOM-225
                     * below code is to deal with ISE.
                     * now we allow customers to unselect "locked" addons
                     * if ISE is somehow not show up in window["lastSelectedAddons"],
                     * it doesn't mean it's unselected, since it can be a different duration
                     * like locked is 4Y ISE, but selected is 3Y ISE, then should not remove
                     * 4Y ISE from locked.
                     */
                     result.locked = result.locked.filter(function (x){
                        if (x.warrantyCode==='ISE')
                        {
                            let hasISE=false;
                            window["lastSelectedAddons"].filter(function(addonpn) {
                                let addon=null;
                                responseData.addons.filter(function(temp){
                                    if (temp.partNumber===addonpn)
                                    {
                                        addon=temp;

                                    }
                                    return true;
                                })
                                if (addon.warrantyCode=='ISE')
                                    hasISE=true;
                                return true;
                            })
                            return hasISE;
                        }
                        return (window["lastSelectedAddons"].indexOf(x.partnumber) >=0 );
                    })
                }
            }
        }

        if (window["lastSelectedAddons"] && window["lastSelectedAddons"].length > 0) {
            let selectedDependencies = responseData.addons.filter(function (addon) {
                if (addon.dependencies) {
                    let include = false;

                    window["lastSelectedAddons"].concat(result.locked.map(function (lockedAddon) { return lockedAddon.partNumber })).some(function (selectedAddon) {
                        if (addon.dependencies.includes(selectedAddon))
                            include = true;

                        return include == true;
                    });

                    return include;
                }
                return false;
            });

            result.needDisplayed = result.needDisplayed.concat(selectedDependencies);
            result.canBeSelected = result.canBeSelected.concat(selectedDependencies);

            //Enable bundles logic
            if (result.locked && result.locked.length > 0) {
                //Refresh Locked information because the length of time may change
                selectedDependencies.map(function (selectedAddon) {
                    let addons = result.locked.filter(function (lockedAddon) { return lockedAddon.warrantyCode == selectedAddon.warrantyCode });
                    if (addons && addons.length > 0) {
                        if (selectedAddon.unitTerm > addons[0].unitTerm) {
                            addons[0].unitTerm = selectedAddon.unitTerm;
                            addons[0].partNumber = selectedAddon.partNumber;
                        }
                    }
                });
            }
        }

        result.locked = _distinct(_filterArray(result.locked, responseData));
        result.needDisplayed = _distinct(_filterArray(result.needDisplayed, responseData));
        result.canBeSelected = _distinct(_filterArray(result.canBeSelected, responseData));
        result.needDisplayed = _distinct(result.needDisplayed.concat(result.canBeSelected));

        result.selectedWarranty = window["lastSelectedWarrantyPn"] ? window["lastSelectedWarrantyPn"] : "BASE";
        result.selected = window["lastSelectedAddons"] && window["lastSelectedAddons"].length > 0 ? window["lastSelectedAddons"] : [];
        result.selected = result.selected.filter(function (item) { return result.needDisplayed.includes(item) });

        if (result.locked && result.locked.length > 0) {
            result.selected = _distinct(result.selected.concat(result.locked));

            //qiaotan1 2020.06.17 EOM-225 comment out below line, since we don't really lock any addons, we don't remove things from canBeSelected.
            //result.canBeSelected = result.canBeSelected.filter(function (item) { return !result.locked.includes(item) });
        }
        result.selected = _clearInvalidSelected(responseData.addons, result.selected, result.selectedWarranty);

        //Fix UPS-1518
        if (responseData.optionsSetting && responseData.optionsSetting.mandatoryBundle && responseData.optionsSetting.iseNeedBundle && result.selected && result.selected.length > 0) {
            let iseDependencyAddons = responseData.addons.filter(function (addon) { return result.selected.includes(addon.partNumber) && responseData.optionsSetting.iseBundlesWithTypes.includes(addon.warrantyCode) });
            if (iseDependencyAddons != null && iseDependencyAddons.length > 0) {
                let unitTerm = iseDependencyAddons[0].unitTerm;
                let ise = responseData.addons.filter(function (addon) { return addon.warrantyCode == "ISE" && addon.unitTerm == unitTerm });
                if (ise && ise.length > 0 && result.needDisplayed.includes(ise[0].partNumber)) {
                    result.locked.push(ise[0].partNumber);
                    result.selected.push(ise[0].partNumber);
                }
            }
        }

        if (responseData.optionsSetting && responseData.optionsSetting.iseBundlesWithTypes && responseData.optionsSetting.iseBundlesWithTypes.length > 0) {
            let maxTerm = Math.max.apply(Math, responseData.addons.filter(function (addon) { return result.selected.includes(addon.partNumber) && responseData.optionsSetting.iseBundlesWithTypes.includes(addon.warrantyCode) }).map(function (selectedAddon) { return selectedAddon.unitTerm }));
            let maxTermIses = responseData.addons.filter(function (addon) { return addon.warrantyCode == "ISE" && addon.unitTerm == maxTerm });

            if (maxTermIses && maxTermIses.length > 0) {
                maxTermIse = maxTermIses[0];
                let beforeLength = result.needDisplayed.length;
                result.needDisplayed = responseData.addons.filter(function (addon) { return result.needDisplayed.includes(addon.partNumber) }).filter(function (displayedAddon) { return displayedAddon.warrantyCode != "ISE" }).map(function (m) { return m.partNumber })
                if (beforeLength != result.needDisplayed.length)
                    result.needDisplayed.push(maxTermIse.partNumber);

                beforeLength = result.canBeSelected.length;
                result.canBeSelected = responseData.addons.filter(function (addon) { return result.canBeSelected.includes(addon.partNumber) }).filter(function (canBeSelectedAddon) { return canBeSelectedAddon.warrantyCode != "ISE" }).map(function (m) { return m.partNumber })
                if (beforeLength != result.canBeSelected.length)
                    result.canBeSelected.push(maxTermIse.partNumber);

                beforeLength = result.locked.length;
                result.locked = responseData.addons.filter(function (addon) { return result.locked.includes(addon.partNumber) }).filter(function (lockedAddon) { return lockedAddon.warrantyCode != "ISE" }).map(function (m) { return m.partNumber })
                if (beforeLength != result.locked.length)
                    result.locked.push(maxTermIse.partNumber);

                beforeLength = result.selected.length;
                result.selected = responseData.addons.filter(function (addon) { return result.selected.includes(addon.partNumber) }).filter(function (selectedAddon) { return selectedAddon.warrantyCode != "ISE" }).map(function (m) { return m.partNumber })
                if (beforeLength != result.selected.length)
                    result.selected.push(maxTermIse.partNumber);
            }
        }

        //Reset last selected addons
        /**************
         *  qiaotan01 2020.06.17 EOM-225, below line is to combine locked and selected
         *  since ISE can be newly added to locked. And now all the locked are
         *  actually selected since we don't really lock them as EOM-225
         */
        result.selected = _distinct(result.selected.concat(result.locked));
        window["lastSelectedAddons"] = result.selected;
        result.locked=[];
        return result;
    };
    _getAddonForCurrentWarranty = function (responseData) {
        let result = { needDisplayed: [], canBeSelected: [], locked: [] };

        if (responseData.addons && responseData.addons.length > 0) {
            let dependenciesAddon = responseData.addons.filter(function (item) { return item.dependencies && item.dependencies.includes("BASE") });
            result.needDisplayed = _recursiveGetDependencies(responseData.addons, dependenciesAddon);
            result.canBeSelected = dependenciesAddon;
        }

        return result;
    };
    _getAddonForSpecificWarranty = function (responseData, pn) {
        let result = { needDisplayed: [], canBeSelected: [], locked: [] };

        if (pn) {
            let selectedWarranties = responseData.warranties.filter(function (item) { return item.partNumber == pn });
            if (selectedWarranties && selectedWarranties.length > 0) {
                let selectedWarranty = selectedWarranties[0];

                result.canBeSelected = responseData.addons.filter(function (item) { return item.dependencies && item.dependencies.includes(pn) });
                result.needDisplayed = _recursiveGetDependencies(responseData.addons, result.canBeSelected);
                //responseData.optionsSetting.mandatoryBundle UPS-1684
                if (responseData.optionsSetting && responseData.optionsSetting.mandatoryBundle && selectedWarranty.bundles && selectedWarranty.bundles.length > 0) {
                    result.locked = responseData.addons.filter(function (item) { return selectedWarranty.bundles.includes(item.partNumber) });

                    //qiaotan1 2020.06.17 EOM-225 comment out below line, since we don't really lock any addons, we don't remove things from canBeSelected.
                    //result.canBeSelected = result.canBeSelected.filter(function (selected) { return !result.locked.includes(selected.partNumber) });
                }
            }
        }

        return result;
    };
    _filterArray = function (addons, responseData) {
        let tempList = [];

        addons.map(function (m) {
            let addon = tempList.filter(function (f) { return f.warrantyCode == m.warrantyCode });
            if (responseData.optionsSetting && responseData.optionsSetting.durationNeedAline && addon && addon.length > 0) {
                if (m.unitTerm > addon[0].unitTerm) {
                    addon[0].unitTerm = m.unitTerm;
                    addon[0].partNumber = m.partNumber;
                }
            }
            else {
                tempList.push(m);
            }
        })

        return tempList.map(function (temp) { return temp.partNumber });
    };
    _recursiveGetDependencies = function (addons, dependenciesAddon) {
        let result = [];

        if (addons && addons.length > 0 && dependenciesAddon && dependenciesAddon.length > 0) {
            result = result.concat(dependenciesAddon);
            if (result.length > 0) {
                let needBreak = false;
                while (!needBreak) {
                    let addNumber = 0;

                    result.map(function (r) {
                        let dependencies = addons.filter(function (addon) { return addon.dependencies && addon.dependencies.includes(r.partNumber) });
                        if (dependencies.length > 0) {
                            dependencies.forEach(function (f) {
                                let exists = result.filter(function (item) { return item.partNumber == f.partNumber }).length > 0;
                                if (!exists) {
                                    result.push(f);
                                    addNumber++;
                                }
                            });
                        }
                    });

                    if (addNumber == 0) needBreak = true;
                }
            }
        }

        return result;
    };
    _clearInvalidSelected = function (addons, selected, selectedWarranty) {
        let needBreak = false;

        if (addons && addons.length > 0) {
            while (!needBreak) {
                let needRemoveIds = [];

                selected.map(function (s) {
                    let selectedAddons = addons.filter(function (a) { return a.partNumber == s });
                    if (selectedAddons && selectedAddons.length > 0) {
                        let dependencies = selectedAddons[0].dependencies;
                        if (dependencies && dependencies.length > 0) {
                            let exists = dependencies.includes(selectedWarranty);
                            if (!exists) {
                                dependencies.some(function (dependencyPartNumber) {
                                    exists = selected.filter(function (partNumber) { return partNumber == dependencyPartNumber }).length > 0;
                                    return exists == true;
                                });
                            }

                            if (!exists)
                                needRemoveIds.push(s);
                        }
                    }
                    else
                        needRemoveIds.push(s);
                });

                if (needRemoveIds.length > 0)
                    selected = selected.filter(function (f) { return !needRemoveIds.includes(f) });
                else
                    needBreak = true;
            }
        }

        return selected;
    }
    _distinct = function (arr) {
        arr = arr || [];
        var newArr = [];
        arr.forEach(function (item) {
            if (newArr.indexOf(item) === -1) newArr.push(item);
        });
        return newArr;
    }
})(serviceOption);
